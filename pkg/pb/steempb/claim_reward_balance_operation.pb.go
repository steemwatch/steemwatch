// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: claim_reward_balance_operation.proto

package steempb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ClaimRewardBalanceOperation struct {
	Account     string `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	RewardSBD   string `protobuf:"bytes,2,opt,name=reward_sbd,json=rewardSbd,proto3" json:"reward_sbd,omitempty"`
	RewardSTEEM string `protobuf:"bytes,3,opt,name=reward_steem,json=rewardSteem,proto3" json:"reward_steem,omitempty"`
	RewardVests string `protobuf:"bytes,4,opt,name=reward_vests,json=rewardVests,proto3" json:"reward_vests,omitempty"`
}

func (m *ClaimRewardBalanceOperation) Reset()         { *m = ClaimRewardBalanceOperation{} }
func (m *ClaimRewardBalanceOperation) String() string { return proto.CompactTextString(m) }
func (*ClaimRewardBalanceOperation) ProtoMessage()    {}
func (*ClaimRewardBalanceOperation) Descriptor() ([]byte, []int) {
	return fileDescriptorClaimRewardBalanceOperation, []int{0}
}

func (m *ClaimRewardBalanceOperation) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *ClaimRewardBalanceOperation) GetRewardSBD() string {
	if m != nil {
		return m.RewardSBD
	}
	return ""
}

func (m *ClaimRewardBalanceOperation) GetRewardSTEEM() string {
	if m != nil {
		return m.RewardSTEEM
	}
	return ""
}

func (m *ClaimRewardBalanceOperation) GetRewardVests() string {
	if m != nil {
		return m.RewardVests
	}
	return ""
}

func init() {
	proto.RegisterType((*ClaimRewardBalanceOperation)(nil), "steemwatch.steem.ClaimRewardBalanceOperation")
}

func init() {
	proto.RegisterFile("claim_reward_balance_operation.proto", fileDescriptorClaimRewardBalanceOperation)
}

var fileDescriptorClaimRewardBalanceOperation = []byte{
	// 237 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x49, 0xce, 0x49, 0xcc,
	0xcc, 0x8d, 0x2f, 0x4a, 0x2d, 0x4f, 0x2c, 0x4a, 0x89, 0x4f, 0x4a, 0xcc, 0x49, 0xcc, 0x4b, 0x4e,
	0x8d, 0xcf, 0x2f, 0x48, 0x2d, 0x4a, 0x2c, 0xc9, 0xcc, 0xcf, 0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9,
	0x17, 0x12, 0x28, 0x2e, 0x49, 0x4d, 0xcd, 0x2d, 0x4f, 0x2c, 0x49, 0xce, 0xd0, 0x03, 0x33, 0xa5,
	0x74, 0xd3, 0x33, 0x4b, 0x32, 0x4a, 0x93, 0xf4, 0x92, 0xf3, 0x73, 0xf5, 0xd3, 0xf3, 0xd3, 0xf3,
	0xf5, 0xc1, 0x0a, 0x93, 0x4a, 0xd3, 0xc0, 0x3c, 0x30, 0x07, 0xcc, 0x82, 0x18, 0xa0, 0xb4, 0x87,
	0x91, 0x4b, 0xda, 0x19, 0x64, 0x53, 0x10, 0xd8, 0x22, 0x27, 0x88, 0x3d, 0xfe, 0x30, 0x6b, 0x84,
	0x24, 0xb8, 0xd8, 0x13, 0x93, 0x93, 0xf3, 0x4b, 0xf3, 0x4a, 0x24, 0x18, 0x15, 0x18, 0x35, 0x38,
	0x83, 0x60, 0x5c, 0x21, 0x1d, 0x2e, 0x2e, 0xa8, 0xe3, 0x8a, 0x93, 0x52, 0x24, 0x98, 0x40, 0x92,
	0x4e, 0xbc, 0x8f, 0xee, 0xc9, 0x73, 0x42, 0x4c, 0x0a, 0x76, 0x72, 0x09, 0xe2, 0x84, 0x28, 0x08,
	0x4e, 0x4a, 0x11, 0x32, 0xe2, 0xe2, 0x81, 0xa9, 0x06, 0x39, 0x53, 0x82, 0x19, 0xac, 0x9e, 0xff,
	0xd1, 0x3d, 0x79, 0x6e, 0xa8, 0xfa, 0x10, 0x57, 0x57, 0xdf, 0x20, 0x6e, 0xa8, 0x0e, 0x90, 0x1a,
	0x21, 0x45, 0xb8, 0x9e, 0xb2, 0xd4, 0xe2, 0x92, 0x62, 0x09, 0x16, 0xb0, 0x03, 0xa0, 0x4a, 0xc2,
	0x40, 0x42, 0x4e, 0x9c, 0x51, 0xec, 0x60, 0xf3, 0x0a, 0x92, 0x92, 0xd8, 0xc0, 0x1e, 0x32, 0x06,
	0x04, 0x00, 0x00, 0xff, 0xff, 0xe3, 0xe4, 0x4b, 0xd5, 0x39, 0x01, 0x00, 0x00,
}
