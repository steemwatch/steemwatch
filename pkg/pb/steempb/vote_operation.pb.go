// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: vote_operation.proto

package steempb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type VoteOperation struct {
	Author   string `protobuf:"bytes,1,opt,name=author,proto3" json:"author,omitempty"`
	Permlink string `protobuf:"bytes,2,opt,name=permlink,proto3" json:"permlink,omitempty"`
	Voter    string `protobuf:"bytes,3,opt,name=voter,proto3" json:"voter,omitempty"`
	Weight   int32  `protobuf:"varint,4,opt,name=weight,proto3" json:"weight,omitempty"`
}

func (m *VoteOperation) Reset()                    { *m = VoteOperation{} }
func (m *VoteOperation) String() string            { return proto.CompactTextString(m) }
func (*VoteOperation) ProtoMessage()               {}
func (*VoteOperation) Descriptor() ([]byte, []int) { return fileDescriptorVoteOperation, []int{0} }

func (m *VoteOperation) GetAuthor() string {
	if m != nil {
		return m.Author
	}
	return ""
}

func (m *VoteOperation) GetPermlink() string {
	if m != nil {
		return m.Permlink
	}
	return ""
}

func (m *VoteOperation) GetVoter() string {
	if m != nil {
		return m.Voter
	}
	return ""
}

func (m *VoteOperation) GetWeight() int32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func init() {
	proto.RegisterType((*VoteOperation)(nil), "steemwatch.steem.VoteOperation")
}

func init() { proto.RegisterFile("vote_operation.proto", fileDescriptorVoteOperation) }

var fileDescriptorVoteOperation = []byte{
	// 151 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x29, 0xcb, 0x2f, 0x49,
	0x8d, 0xcf, 0x2f, 0x48, 0x2d, 0x4a, 0x2c, 0xc9, 0xcc, 0xcf, 0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9,
	0x17, 0x12, 0x28, 0x2e, 0x49, 0x4d, 0xcd, 0x2d, 0x4f, 0x2c, 0x49, 0xce, 0xd0, 0x03, 0x33, 0x95,
	0x0a, 0xb9, 0x78, 0xc3, 0xf2, 0x4b, 0x52, 0xfd, 0x61, 0x0a, 0x85, 0xc4, 0xb8, 0xd8, 0x12, 0x4b,
	0x4b, 0x32, 0xf2, 0x8b, 0x24, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0xa0, 0x3c, 0x21, 0x29, 0x2e,
	0x8e, 0x82, 0xd4, 0xa2, 0xdc, 0x9c, 0xcc, 0xbc, 0x6c, 0x09, 0x26, 0xb0, 0x0c, 0x9c, 0x2f, 0x24,
	0xc2, 0xc5, 0x0a, 0xb2, 0xae, 0x48, 0x82, 0x19, 0x2c, 0x01, 0xe1, 0x80, 0x4c, 0x2a, 0x4f, 0xcd,
	0x4c, 0xcf, 0x28, 0x91, 0x60, 0x51, 0x60, 0xd4, 0x60, 0x0d, 0x82, 0xf2, 0x9c, 0x38, 0xa3, 0xd8,
	0xc1, 0x76, 0x17, 0x24, 0x25, 0xb1, 0x81, 0x9d, 0x65, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x0c,
	0x55, 0x69, 0xf0, 0xae, 0x00, 0x00, 0x00,
}
