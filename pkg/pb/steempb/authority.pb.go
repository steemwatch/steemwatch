// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: authority.proto

package steempb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Authority struct {
	WeightThreshold uint32 `protobuf:"varint,1,opt,name=weight_threshold,json=weightThreshold,proto3" json:"weight_threshold,omitempty"`
	// typedef flat_map< account_name_type, weight_type > account_authority_map;
	//
	// account_authority_map account_auths;
	AccountAuths map[string]int64 `protobuf:"bytes,2,rep,name=account_auths,json=accountAuths" json:"account_auths,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// typedef flat_map< public_key_type, weight_type > key_authority_map;
	//
	// key_authority_map key_auths;
	KeyAuths map[string]int64 `protobuf:"bytes,3,rep,name=key_auths,json=keyAuths" json:"key_auths,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *Authority) Reset()                    { *m = Authority{} }
func (m *Authority) String() string            { return proto.CompactTextString(m) }
func (*Authority) ProtoMessage()               {}
func (*Authority) Descriptor() ([]byte, []int) { return fileDescriptorAuthority, []int{0} }

func (m *Authority) GetWeightThreshold() uint32 {
	if m != nil {
		return m.WeightThreshold
	}
	return 0
}

func (m *Authority) GetAccountAuths() map[string]int64 {
	if m != nil {
		return m.AccountAuths
	}
	return nil
}

func (m *Authority) GetKeyAuths() map[string]int64 {
	if m != nil {
		return m.KeyAuths
	}
	return nil
}

func init() {
	proto.RegisterType((*Authority)(nil), "steemwatch.steem.Authority")
}

func init() { proto.RegisterFile("authority.proto", fileDescriptorAuthority) }

var fileDescriptorAuthority = []byte{
	// 231 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4f, 0x2c, 0x2d, 0xc9,
	0xc8, 0x2f, 0xca, 0x2c, 0xa9, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x28, 0x2e, 0x49,
	0x4d, 0xcd, 0x2d, 0x4f, 0x2c, 0x49, 0xce, 0xd0, 0x03, 0x33, 0x95, 0x2e, 0x30, 0x71, 0x71, 0x3a,
	0xc2, 0x54, 0x09, 0x69, 0x72, 0x09, 0x94, 0xa7, 0x66, 0xa6, 0x67, 0x94, 0xc4, 0x97, 0x64, 0x14,
	0xa5, 0x16, 0x67, 0xe4, 0xe7, 0xa4, 0x48, 0x30, 0x2a, 0x30, 0x6a, 0xf0, 0x06, 0xf1, 0x43, 0xc4,
	0x43, 0x60, 0xc2, 0x42, 0x41, 0x5c, 0xbc, 0x89, 0xc9, 0xc9, 0xf9, 0xa5, 0x79, 0x25, 0xf1, 0x20,
	0x5b, 0x8a, 0x25, 0x98, 0x14, 0x98, 0x35, 0xb8, 0x8d, 0x74, 0xf5, 0xd0, 0xad, 0xd0, 0x83, 0x1b,
	0xaf, 0xe7, 0x08, 0xd1, 0x00, 0x12, 0x28, 0x76, 0xcd, 0x2b, 0x29, 0xaa, 0x0c, 0xe2, 0x49, 0x44,
	0x12, 0x12, 0x72, 0xe3, 0xe2, 0xcc, 0x4e, 0xad, 0x84, 0x9a, 0xc7, 0x0c, 0x36, 0x4f, 0x13, 0x9f,
	0x79, 0xde, 0xa9, 0x95, 0x48, 0x66, 0x71, 0x64, 0x43, 0xb9, 0x52, 0xf6, 0x5c, 0x82, 0x18, 0x56,
	0x09, 0x09, 0x70, 0x31, 0x67, 0xa7, 0x56, 0x82, 0xbd, 0xc3, 0x19, 0x04, 0x62, 0x0a, 0x89, 0x70,
	0xb1, 0x96, 0x25, 0xe6, 0x94, 0xa6, 0x4a, 0x30, 0x29, 0x30, 0x6a, 0x30, 0x07, 0x41, 0x38, 0x56,
	0x4c, 0x16, 0x8c, 0x52, 0xd6, 0x5c, 0xbc, 0x28, 0x66, 0x93, 0xa2, 0xd9, 0x89, 0x33, 0x8a, 0x1d,
	0xec, 0xd0, 0x82, 0xa4, 0x24, 0x36, 0x70, 0xb0, 0x1b, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0xab,
	0x14, 0x78, 0x3b, 0x89, 0x01, 0x00, 0x00,
}
