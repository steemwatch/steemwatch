// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: delegate_vesting_shares_operation.proto

package steempb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type DelegateVestingSharesOperation struct {
	Delegator     string `protobuf:"bytes,1,opt,name=delegator,proto3" json:"delegator,omitempty"`
	Delegatee     string `protobuf:"bytes,2,opt,name=delegatee,proto3" json:"delegatee,omitempty"`
	VestingShares string `protobuf:"bytes,3,opt,name=vesting_shares,json=vestingShares,proto3" json:"vesting_shares,omitempty"`
}

func (m *DelegateVestingSharesOperation) Reset()         { *m = DelegateVestingSharesOperation{} }
func (m *DelegateVestingSharesOperation) String() string { return proto.CompactTextString(m) }
func (*DelegateVestingSharesOperation) ProtoMessage()    {}
func (*DelegateVestingSharesOperation) Descriptor() ([]byte, []int) {
	return fileDescriptorDelegateVestingSharesOperation, []int{0}
}

func (m *DelegateVestingSharesOperation) GetDelegator() string {
	if m != nil {
		return m.Delegator
	}
	return ""
}

func (m *DelegateVestingSharesOperation) GetDelegatee() string {
	if m != nil {
		return m.Delegatee
	}
	return ""
}

func (m *DelegateVestingSharesOperation) GetVestingShares() string {
	if m != nil {
		return m.VestingShares
	}
	return ""
}

func init() {
	proto.RegisterType((*DelegateVestingSharesOperation)(nil), "steemwatch.steem.DelegateVestingSharesOperation")
}

func init() {
	proto.RegisterFile("delegate_vesting_shares_operation.proto", fileDescriptorDelegateVestingSharesOperation)
}

var fileDescriptorDelegateVestingSharesOperation = []byte{
	// 152 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x4f, 0x49, 0xcd, 0x49,
	0x4d, 0x4f, 0x2c, 0x49, 0x8d, 0x2f, 0x4b, 0x2d, 0x2e, 0xc9, 0xcc, 0x4b, 0x8f, 0x2f, 0xce, 0x48,
	0x2c, 0x4a, 0x2d, 0x8e, 0xcf, 0x2f, 0x48, 0x2d, 0x4a, 0x2c, 0xc9, 0xcc, 0xcf, 0xd3, 0x2b, 0x28,
	0xca, 0x2f, 0xc9, 0x17, 0x12, 0x28, 0x2e, 0x49, 0x4d, 0xcd, 0x2d, 0x4f, 0x2c, 0x49, 0xce, 0xd0,
	0x03, 0x33, 0x95, 0x9a, 0x19, 0xb9, 0xe4, 0x5c, 0xa0, 0xba, 0xc3, 0x20, 0x9a, 0x83, 0xc1, 0x7a,
	0xfd, 0x61, 0x5a, 0x85, 0x64, 0xb8, 0x38, 0xa1, 0xe6, 0xe7, 0x17, 0x49, 0x30, 0x2a, 0x30, 0x6a,
	0x70, 0x06, 0x21, 0x04, 0x90, 0x64, 0x53, 0x53, 0x25, 0x98, 0x50, 0x64, 0x53, 0x53, 0x85, 0x54,
	0xb9, 0xf8, 0x50, 0x9d, 0x24, 0xc1, 0x0c, 0x56, 0xc2, 0x5b, 0x86, 0x6c, 0x97, 0x13, 0x67, 0x14,
	0x3b, 0xd8, 0x39, 0x05, 0x49, 0x49, 0x6c, 0x60, 0x97, 0x1a, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff,
	0xc8, 0x60, 0x84, 0xa8, 0xd4, 0x00, 0x00, 0x00,
}
