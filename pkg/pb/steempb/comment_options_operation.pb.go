// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: comment_options_operation.proto

package steempb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type CommentOptionsOperation struct {
	Author               string                    `protobuf:"bytes,1,opt,name=author,proto3" json:"author,omitempty"`
	Permlink             string                    `protobuf:"bytes,2,opt,name=permlink,proto3" json:"permlink,omitempty"`
	MaxAcceptedPayout    string                    `protobuf:"bytes,3,opt,name=max_accepted_payout,json=maxAcceptedPayout,proto3" json:"max_accepted_payout,omitempty"`
	PercentSteemDollars  int32                     `protobuf:"varint,4,opt,name=percent_steem_dollars,json=percentSteemDollars,proto3" json:"percent_steem_dollars,omitempty"`
	AllowVotes           bool                      `protobuf:"varint,5,opt,name=allow_votes,json=allowVotes,proto3" json:"allow_votes,omitempty"`
	AllowCurationRewards bool                      `protobuf:"varint,6,opt,name=allow_curation_rewards,json=allowCurationRewards,proto3" json:"allow_curation_rewards,omitempty"`
	Extensions           *CommentOptionsExtensions `protobuf:"bytes,7,opt,name=extensions" json:"extensions,omitempty"`
}

func (m *CommentOptionsOperation) Reset()         { *m = CommentOptionsOperation{} }
func (m *CommentOptionsOperation) String() string { return proto.CompactTextString(m) }
func (*CommentOptionsOperation) ProtoMessage()    {}
func (*CommentOptionsOperation) Descriptor() ([]byte, []int) {
	return fileDescriptorCommentOptionsOperation, []int{0}
}

func (m *CommentOptionsOperation) GetAuthor() string {
	if m != nil {
		return m.Author
	}
	return ""
}

func (m *CommentOptionsOperation) GetPermlink() string {
	if m != nil {
		return m.Permlink
	}
	return ""
}

func (m *CommentOptionsOperation) GetMaxAcceptedPayout() string {
	if m != nil {
		return m.MaxAcceptedPayout
	}
	return ""
}

func (m *CommentOptionsOperation) GetPercentSteemDollars() int32 {
	if m != nil {
		return m.PercentSteemDollars
	}
	return 0
}

func (m *CommentOptionsOperation) GetAllowVotes() bool {
	if m != nil {
		return m.AllowVotes
	}
	return false
}

func (m *CommentOptionsOperation) GetAllowCurationRewards() bool {
	if m != nil {
		return m.AllowCurationRewards
	}
	return false
}

func (m *CommentOptionsOperation) GetExtensions() *CommentOptionsExtensions {
	if m != nil {
		return m.Extensions
	}
	return nil
}

type CommentOptionsExtensions struct {
	CommentPayoutBeneficiaries *CommentPayoutBeneficiaries `protobuf:"bytes,1,opt,name=comment_payout_beneficiaries,json=commentPayoutBeneficiaries" json:"comment_payout_beneficiaries,omitempty"`
}

func (m *CommentOptionsExtensions) Reset()         { *m = CommentOptionsExtensions{} }
func (m *CommentOptionsExtensions) String() string { return proto.CompactTextString(m) }
func (*CommentOptionsExtensions) ProtoMessage()    {}
func (*CommentOptionsExtensions) Descriptor() ([]byte, []int) {
	return fileDescriptorCommentOptionsOperation, []int{1}
}

func (m *CommentOptionsExtensions) GetCommentPayoutBeneficiaries() *CommentPayoutBeneficiaries {
	if m != nil {
		return m.CommentPayoutBeneficiaries
	}
	return nil
}

type CommentPayoutBeneficiaries struct {
	Account string `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	Weight  uint32 `protobuf:"varint,2,opt,name=weight,proto3" json:"weight,omitempty"`
}

func (m *CommentPayoutBeneficiaries) Reset()         { *m = CommentPayoutBeneficiaries{} }
func (m *CommentPayoutBeneficiaries) String() string { return proto.CompactTextString(m) }
func (*CommentPayoutBeneficiaries) ProtoMessage()    {}
func (*CommentPayoutBeneficiaries) Descriptor() ([]byte, []int) {
	return fileDescriptorCommentOptionsOperation, []int{2}
}

func (m *CommentPayoutBeneficiaries) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *CommentPayoutBeneficiaries) GetWeight() uint32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func init() {
	proto.RegisterType((*CommentOptionsOperation)(nil), "steemwatch.steem.CommentOptionsOperation")
	proto.RegisterType((*CommentOptionsExtensions)(nil), "steemwatch.steem.CommentOptionsExtensions")
	proto.RegisterType((*CommentPayoutBeneficiaries)(nil), "steemwatch.steem.CommentPayoutBeneficiaries")
}

func init() {
	proto.RegisterFile("comment_options_operation.proto", fileDescriptorCommentOptionsOperation)
}

var fileDescriptorCommentOptionsOperation = []byte{
	// 358 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0x4d, 0x4e, 0xeb, 0x30,
	0x14, 0x85, 0x95, 0xbe, 0xd7, 0xbf, 0x5b, 0x3d, 0xe9, 0xe1, 0x42, 0xb1, 0x2a, 0xa4, 0x46, 0x1d,
	0x45, 0x08, 0x65, 0x50, 0xd8, 0x00, 0x2d, 0x4c, 0x18, 0x50, 0x14, 0x24, 0x06, 0x4c, 0x2c, 0xd7,
	0xbd, 0xd0, 0x88, 0x24, 0xb6, 0x1c, 0x87, 0x94, 0x2d, 0xb0, 0x3e, 0x16, 0x84, 0x62, 0xa7, 0x55,
	0x41, 0xca, 0xcc, 0xd7, 0xdf, 0x39, 0xca, 0xcd, 0x39, 0x86, 0x89, 0x90, 0x69, 0x8a, 0x99, 0x61,
	0x52, 0x99, 0x58, 0x66, 0x39, 0x93, 0x0a, 0x35, 0xaf, 0x8e, 0xa1, 0xd2, 0xd2, 0x48, 0xf2, 0x3f,
	0x37, 0x88, 0x69, 0xc9, 0x8d, 0xd8, 0x84, 0xf6, 0x38, 0xfd, 0x6a, 0xc1, 0xe9, 0xc2, 0xb9, 0x96,
	0xce, 0xb4, 0xdc, 0x79, 0xc8, 0x08, 0x3a, 0xbc, 0x30, 0x1b, 0xa9, 0xa9, 0xe7, 0x7b, 0x41, 0x3f,
	0xaa, 0x27, 0x32, 0x86, 0x9e, 0x42, 0x9d, 0x26, 0x71, 0xf6, 0x46, 0x5b, 0x96, 0xec, 0x67, 0x12,
	0xc2, 0x30, 0xe5, 0x5b, 0xc6, 0x85, 0x40, 0x65, 0x70, 0xcd, 0x14, 0xff, 0x90, 0x85, 0xa1, 0x7f,
	0xac, 0xec, 0x28, 0xe5, 0xdb, 0xeb, 0x9a, 0x3c, 0x58, 0x40, 0x66, 0x70, 0xa2, 0x50, 0x8b, 0x6a,
	0x69, 0xbb, 0x10, 0x5b, 0xcb, 0x24, 0xe1, 0x3a, 0xa7, 0x7f, 0x7d, 0x2f, 0x68, 0x47, 0xc3, 0x1a,
	0x3e, 0x56, 0xec, 0xc6, 0x21, 0x32, 0x81, 0x01, 0x4f, 0x12, 0x59, 0xb2, 0x77, 0x69, 0x30, 0xa7,
	0x6d, 0xdf, 0x0b, 0x7a, 0x11, 0xd8, 0xab, 0xa7, 0xea, 0x86, 0x5c, 0xc1, 0xc8, 0x09, 0x44, 0xe1,
	0x7e, 0x85, 0x69, 0x2c, 0xb9, 0x5e, 0xe7, 0xb4, 0x63, 0xb5, 0xc7, 0x96, 0x2e, 0x6a, 0x18, 0x39,
	0x46, 0xee, 0x00, 0x70, 0x6b, 0x30, 0xcb, 0xab, 0x14, 0x68, 0xd7, 0xf7, 0x82, 0xc1, 0xec, 0x3c,
	0xfc, 0x9d, 0x58, 0xf8, 0x33, 0xad, 0xdb, 0xbd, 0x23, 0x3a, 0x70, 0x4f, 0x3f, 0x3d, 0xa0, 0x4d,
	0x42, 0x92, 0xc1, 0xd9, 0xae, 0x28, 0x17, 0x0f, 0x5b, 0x61, 0x86, 0x2f, 0xb1, 0x88, 0xb9, 0x8e,
	0x31, 0xb7, 0x69, 0x0f, 0x66, 0x17, 0x8d, 0x9f, 0x76, 0xd1, 0xcd, 0x0f, 0x3d, 0xd1, 0x58, 0x34,
	0xb2, 0xe9, 0x3d, 0x8c, 0x9b, 0x9d, 0x84, 0x42, 0x97, 0x0b, 0x21, 0x8b, 0xcc, 0xd4, 0x35, 0xef,
	0xc6, 0xaa, 0xff, 0x12, 0xe3, 0xd7, 0x8d, 0xb1, 0x2d, 0xff, 0x8b, 0xea, 0x69, 0xde, 0x7f, 0xee,
	0xda, 0x7d, 0xd4, 0x6a, 0xd5, 0xb1, 0xef, 0xea, 0xf2, 0x3b, 0x00, 0x00, 0xff, 0xff, 0xfc, 0x4b,
	0x59, 0x9c, 0x7a, 0x02, 0x00, 0x00,
}
