// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: operation.proto

package steempb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Operation struct {
	// Types that are valid to be assigned to Operation:
	//	*Operation_AccountCreate
	//	*Operation_AccountCreateWithDelegation
	//	*Operation_AccountUpdate
	//	*Operation_ChannelAuthority
	//	*Operation_ProveAuthority
	//	*Operation_RequestAccountRecovery
	//	*Operation_RecoverAccount
	//	*Operation_ChangeRecoveryAccount
	//	*Operation_ResetAccount
	//	*Operation_SetResetAccount
	//	*Operation_AccountWitnessVote
	//	*Operation_AccountWitnessProxy
	//	*Operation_DelegateVestingShares
	//	*Operation_DeclineVotingRights
	//	*Operation_WitnessUpdate
	//	*Operation_FeedPublish
	//	*Operation_POW
	//	*Operation_POW2
	//	*Operation_ReportOverProduction
	//	*Operation_Comment
	//	*Operation_CommentOptions
	//	*Operation_DeleteComment
	//	*Operation_Vote
	//	*Operation_ClaimRewardBalance
	//	*Operation_Custom
	//	*Operation_CustomJSON
	//	*Operation_CustomBinary
	//	*Operation_Transfer
	//	*Operation_TransferToVesting
	//	*Operation_WithdrawVesting
	//	*Operation_SetWithdrawVestingRoute
	//	*Operation_TransferToSavings
	//	*Operation_TransferFromSavings
	//	*Operation_CancelTransferFromSavings
	//	*Operation_Convert
	//	*Operation_LimitOrderCreate
	//	*Operation_LimitOrderCreate2
	//	*Operation_LimitOrderCancel
	//	*Operation_EscrowTransfer
	//	*Operation_EscrowDispute
	//	*Operation_EscrowRelease
	//	*Operation_EscrowApprove
	//	*Operation_FillConvertRequest
	//	*Operation_AuthorReward
	//	*Operation_CurationReward
	//	*Operation_CommentReward
	//	*Operation_LiquidityReward
	//	*Operation_Interest
	//	*Operation_FillVestingWithdraw
	//	*Operation_FillOrder
	//	*Operation_ShutdownWitness
	//	*Operation_FillTransferFromSavings
	//	*Operation_Hardfork
	//	*Operation_CommentPayoutUpdate
	//	*Operation_ReturnVestingDelegation
	//	*Operation_RewardBenefactorReward
	//	*Operation_ProducerReward
	Operation isOperation_Operation `protobuf_oneof:"operation"`
}

func (m *Operation) Reset()                    { *m = Operation{} }
func (m *Operation) String() string            { return proto.CompactTextString(m) }
func (*Operation) ProtoMessage()               {}
func (*Operation) Descriptor() ([]byte, []int) { return fileDescriptorOperation, []int{0} }

type isOperation_Operation interface {
	isOperation_Operation()
}

type Operation_AccountCreate struct {
	AccountCreate *AccountCreateOperation `protobuf:"bytes,1,opt,name=account_create,json=accountCreate,oneof"`
}
type Operation_AccountCreateWithDelegation struct {
	AccountCreateWithDelegation *AccountCreateWithDelegationOperation `protobuf:"bytes,2,opt,name=account_create_with_delegation,json=accountCreateWithDelegation,oneof"`
}
type Operation_AccountUpdate struct {
	AccountUpdate *AccountUpdateOperation `protobuf:"bytes,3,opt,name=account_update,json=accountUpdate,oneof"`
}
type Operation_ChannelAuthority struct {
	ChannelAuthority *ChallengeAuthorityOperation `protobuf:"bytes,4,opt,name=channel_authority,json=channelAuthority,oneof"`
}
type Operation_ProveAuthority struct {
	ProveAuthority *ProveAuthorityOperation `protobuf:"bytes,5,opt,name=prove_authority,json=proveAuthority,oneof"`
}
type Operation_RequestAccountRecovery struct {
	RequestAccountRecovery *RequestAccountRecoveryOperation `protobuf:"bytes,6,opt,name=request_account_recovery,json=requestAccountRecovery,oneof"`
}
type Operation_RecoverAccount struct {
	RecoverAccount *RecoverAccountOperation `protobuf:"bytes,7,opt,name=recover_account,json=recoverAccount,oneof"`
}
type Operation_ChangeRecoveryAccount struct {
	ChangeRecoveryAccount *ChangeRecoveryAccountOperation `protobuf:"bytes,8,opt,name=change_recovery_account,json=changeRecoveryAccount,oneof"`
}
type Operation_ResetAccount struct {
	ResetAccount *ResetAccountOperation `protobuf:"bytes,9,opt,name=reset_account,json=resetAccount,oneof"`
}
type Operation_SetResetAccount struct {
	SetResetAccount *SetResetAccountOperation `protobuf:"bytes,10,opt,name=set_reset_account,json=setResetAccount,oneof"`
}
type Operation_AccountWitnessVote struct {
	AccountWitnessVote *AccountWitnessVoteOperation `protobuf:"bytes,11,opt,name=account_witness_vote,json=accountWitnessVote,oneof"`
}
type Operation_AccountWitnessProxy struct {
	AccountWitnessProxy *AccountWitnessProxyOperation `protobuf:"bytes,12,opt,name=account_witness_proxy,json=accountWitnessProxy,oneof"`
}
type Operation_DelegateVestingShares struct {
	DelegateVestingShares *DelegateVestingSharesOperation `protobuf:"bytes,13,opt,name=delegate_vesting_shares,json=delegateVestingShares,oneof"`
}
type Operation_DeclineVotingRights struct {
	DeclineVotingRights *DeclineVotingRightsOperation `protobuf:"bytes,14,opt,name=decline_voting_rights,json=declineVotingRights,oneof"`
}
type Operation_WitnessUpdate struct {
	WitnessUpdate *WitnessUpdateOperation `protobuf:"bytes,30,opt,name=witness_update,json=witnessUpdate,oneof"`
}
type Operation_FeedPublish struct {
	FeedPublish *FeedPublishOperation `protobuf:"bytes,31,opt,name=feed_publish,json=feedPublish,oneof"`
}
type Operation_POW struct {
	POW *POWOperation `protobuf:"bytes,40,opt,name=pow,oneof"`
}
type Operation_POW2 struct {
	POW2 *POW2Operation `protobuf:"bytes,41,opt,name=pow2,oneof"`
}
type Operation_ReportOverProduction struct {
	ReportOverProduction *ReportOverProductionOperation `protobuf:"bytes,42,opt,name=report_over_production,json=reportOverProduction,oneof"`
}
type Operation_Comment struct {
	Comment *CommentOperation `protobuf:"bytes,50,opt,name=comment,oneof"`
}
type Operation_CommentOptions struct {
	CommentOptions *CommentOptionsOperation `protobuf:"bytes,51,opt,name=comment_options,json=commentOptions,oneof"`
}
type Operation_DeleteComment struct {
	DeleteComment *DeleteCommentOperation `protobuf:"bytes,52,opt,name=delete_comment,json=deleteComment,oneof"`
}
type Operation_Vote struct {
	Vote *VoteOperation `protobuf:"bytes,53,opt,name=vote,oneof"`
}
type Operation_ClaimRewardBalance struct {
	ClaimRewardBalance *ClaimRewardBalanceOperation `protobuf:"bytes,54,opt,name=claim_reward_balance,json=claimRewardBalance,oneof"`
}
type Operation_Custom struct {
	Custom *CustomOperation `protobuf:"bytes,70,opt,name=custom,oneof"`
}
type Operation_CustomJSON struct {
	CustomJSON *CustomJSONOperation `protobuf:"bytes,71,opt,name=custom_json,json=customJson,oneof"`
}
type Operation_CustomBinary struct {
	CustomBinary *CustomBinaryOperation `protobuf:"bytes,72,opt,name=custom_binary,json=customBinary,oneof"`
}
type Operation_Transfer struct {
	Transfer *TransferOperation `protobuf:"bytes,80,opt,name=transfer,oneof"`
}
type Operation_TransferToVesting struct {
	TransferToVesting *TransferToVestingOperation `protobuf:"bytes,81,opt,name=transfer_to_vesting,json=transferToVesting,oneof"`
}
type Operation_WithdrawVesting struct {
	WithdrawVesting *WithdrawVestingOperation `protobuf:"bytes,82,opt,name=withdraw_vesting,json=withdrawVesting,oneof"`
}
type Operation_SetWithdrawVestingRoute struct {
	SetWithdrawVestingRoute *SetWithdrawVestingRouteOperation `protobuf:"bytes,83,opt,name=set_withdraw_vesting_route,json=setWithdrawVestingRoute,oneof"`
}
type Operation_TransferToSavings struct {
	TransferToSavings *TransferToSavingsOperation `protobuf:"bytes,84,opt,name=transfer_to_savings,json=transferToSavings,oneof"`
}
type Operation_TransferFromSavings struct {
	TransferFromSavings *TransferFromSavingsOperation `protobuf:"bytes,85,opt,name=transfer_from_savings,json=transferFromSavings,oneof"`
}
type Operation_CancelTransferFromSavings struct {
	CancelTransferFromSavings *CancelTransferFromSavingsOperation `protobuf:"bytes,86,opt,name=cancel_transfer_from_savings,json=cancelTransferFromSavings,oneof"`
}
type Operation_Convert struct {
	Convert *ConvertOperation `protobuf:"bytes,87,opt,name=convert,oneof"`
}
type Operation_LimitOrderCreate struct {
	LimitOrderCreate *LimitOrderCreateOperation `protobuf:"bytes,88,opt,name=limit_order_create,json=limitOrderCreate,oneof"`
}
type Operation_LimitOrderCreate2 struct {
	LimitOrderCreate2 *LimitOrderCreate2Operation `protobuf:"bytes,99,opt,name=limit_order_create2,json=limitOrderCreate2,oneof"`
}
type Operation_LimitOrderCancel struct {
	LimitOrderCancel *LimitOrderCancelOperation `protobuf:"bytes,90,opt,name=limit_order_cancel,json=limitOrderCancel,oneof"`
}
type Operation_EscrowTransfer struct {
	EscrowTransfer *EscrowTransferOperation `protobuf:"bytes,91,opt,name=escrow_transfer,json=escrowTransfer,oneof"`
}
type Operation_EscrowDispute struct {
	EscrowDispute *EscrowDisputeOperation `protobuf:"bytes,92,opt,name=escrow_dispute,json=escrowDispute,oneof"`
}
type Operation_EscrowRelease struct {
	EscrowRelease *EscrowReleaseOperation `protobuf:"bytes,93,opt,name=escrow_release,json=escrowRelease,oneof"`
}
type Operation_EscrowApprove struct {
	EscrowApprove *EscrowApproveOperation `protobuf:"bytes,94,opt,name=escrow_approve,json=escrowApprove,oneof"`
}
type Operation_FillConvertRequest struct {
	FillConvertRequest *FillConvertRequestOperation `protobuf:"bytes,100,opt,name=fill_convert_request,json=fillConvertRequest,oneof"`
}
type Operation_AuthorReward struct {
	AuthorReward *AuthorRewardOperation `protobuf:"bytes,101,opt,name=author_reward,json=authorReward,oneof"`
}
type Operation_CurationReward struct {
	CurationReward *CurationRewardOperation `protobuf:"bytes,102,opt,name=curation_reward,json=curationReward,oneof"`
}
type Operation_CommentReward struct {
	CommentReward *CommentRewardOperation `protobuf:"bytes,103,opt,name=comment_reward,json=commentReward,oneof"`
}
type Operation_LiquidityReward struct {
	LiquidityReward *LiquidityRewardOperation `protobuf:"bytes,104,opt,name=liquidity_reward,json=liquidityReward,oneof"`
}
type Operation_Interest struct {
	Interest *InterestOperation `protobuf:"bytes,105,opt,name=interest,oneof"`
}
type Operation_FillVestingWithdraw struct {
	FillVestingWithdraw *FillVestingWithdrawOperation `protobuf:"bytes,106,opt,name=fill_vesting_withdraw,json=fillVestingWithdraw,oneof"`
}
type Operation_FillOrder struct {
	FillOrder *FillOrderOperation `protobuf:"bytes,107,opt,name=fill_order,json=fillOrder,oneof"`
}
type Operation_ShutdownWitness struct {
	ShutdownWitness *ShutdownWitnessOperation `protobuf:"bytes,108,opt,name=shutdown_witness,json=shutdownWitness,oneof"`
}
type Operation_FillTransferFromSavings struct {
	FillTransferFromSavings *FillTransferFromSavingsOperation `protobuf:"bytes,109,opt,name=fill_transfer_from_savings,json=fillTransferFromSavings,oneof"`
}
type Operation_Hardfork struct {
	Hardfork *HardforkOperation `protobuf:"bytes,110,opt,name=hardfork,oneof"`
}
type Operation_CommentPayoutUpdate struct {
	CommentPayoutUpdate *CommentPayoutUpdateOperation `protobuf:"bytes,111,opt,name=comment_payout_update,json=commentPayoutUpdate,oneof"`
}
type Operation_ReturnVestingDelegation struct {
	ReturnVestingDelegation *ReturnVestingDelegationOperation `protobuf:"bytes,112,opt,name=return_vesting_delegation,json=returnVestingDelegation,oneof"`
}
type Operation_RewardBenefactorReward struct {
	RewardBenefactorReward *CommentBenefactorRewardOperation `protobuf:"bytes,113,opt,name=reward_benefactor_reward,json=rewardBenefactorReward,oneof"`
}
type Operation_ProducerReward struct {
	ProducerReward *ProducerRewardOperation `protobuf:"bytes,114,opt,name=producer_reward,json=producerReward,oneof"`
}

func (*Operation_AccountCreate) isOperation_Operation()               {}
func (*Operation_AccountCreateWithDelegation) isOperation_Operation() {}
func (*Operation_AccountUpdate) isOperation_Operation()               {}
func (*Operation_ChannelAuthority) isOperation_Operation()            {}
func (*Operation_ProveAuthority) isOperation_Operation()              {}
func (*Operation_RequestAccountRecovery) isOperation_Operation()      {}
func (*Operation_RecoverAccount) isOperation_Operation()              {}
func (*Operation_ChangeRecoveryAccount) isOperation_Operation()       {}
func (*Operation_ResetAccount) isOperation_Operation()                {}
func (*Operation_SetResetAccount) isOperation_Operation()             {}
func (*Operation_AccountWitnessVote) isOperation_Operation()          {}
func (*Operation_AccountWitnessProxy) isOperation_Operation()         {}
func (*Operation_DelegateVestingShares) isOperation_Operation()       {}
func (*Operation_DeclineVotingRights) isOperation_Operation()         {}
func (*Operation_WitnessUpdate) isOperation_Operation()               {}
func (*Operation_FeedPublish) isOperation_Operation()                 {}
func (*Operation_POW) isOperation_Operation()                         {}
func (*Operation_POW2) isOperation_Operation()                        {}
func (*Operation_ReportOverProduction) isOperation_Operation()        {}
func (*Operation_Comment) isOperation_Operation()                     {}
func (*Operation_CommentOptions) isOperation_Operation()              {}
func (*Operation_DeleteComment) isOperation_Operation()               {}
func (*Operation_Vote) isOperation_Operation()                        {}
func (*Operation_ClaimRewardBalance) isOperation_Operation()          {}
func (*Operation_Custom) isOperation_Operation()                      {}
func (*Operation_CustomJSON) isOperation_Operation()                  {}
func (*Operation_CustomBinary) isOperation_Operation()                {}
func (*Operation_Transfer) isOperation_Operation()                    {}
func (*Operation_TransferToVesting) isOperation_Operation()           {}
func (*Operation_WithdrawVesting) isOperation_Operation()             {}
func (*Operation_SetWithdrawVestingRoute) isOperation_Operation()     {}
func (*Operation_TransferToSavings) isOperation_Operation()           {}
func (*Operation_TransferFromSavings) isOperation_Operation()         {}
func (*Operation_CancelTransferFromSavings) isOperation_Operation()   {}
func (*Operation_Convert) isOperation_Operation()                     {}
func (*Operation_LimitOrderCreate) isOperation_Operation()            {}
func (*Operation_LimitOrderCreate2) isOperation_Operation()           {}
func (*Operation_LimitOrderCancel) isOperation_Operation()            {}
func (*Operation_EscrowTransfer) isOperation_Operation()              {}
func (*Operation_EscrowDispute) isOperation_Operation()               {}
func (*Operation_EscrowRelease) isOperation_Operation()               {}
func (*Operation_EscrowApprove) isOperation_Operation()               {}
func (*Operation_FillConvertRequest) isOperation_Operation()          {}
func (*Operation_AuthorReward) isOperation_Operation()                {}
func (*Operation_CurationReward) isOperation_Operation()              {}
func (*Operation_CommentReward) isOperation_Operation()               {}
func (*Operation_LiquidityReward) isOperation_Operation()             {}
func (*Operation_Interest) isOperation_Operation()                    {}
func (*Operation_FillVestingWithdraw) isOperation_Operation()         {}
func (*Operation_FillOrder) isOperation_Operation()                   {}
func (*Operation_ShutdownWitness) isOperation_Operation()             {}
func (*Operation_FillTransferFromSavings) isOperation_Operation()     {}
func (*Operation_Hardfork) isOperation_Operation()                    {}
func (*Operation_CommentPayoutUpdate) isOperation_Operation()         {}
func (*Operation_ReturnVestingDelegation) isOperation_Operation()     {}
func (*Operation_RewardBenefactorReward) isOperation_Operation()      {}
func (*Operation_ProducerReward) isOperation_Operation()              {}

func (m *Operation) GetOperation() isOperation_Operation {
	if m != nil {
		return m.Operation
	}
	return nil
}

func (m *Operation) GetAccountCreate() *AccountCreateOperation {
	if x, ok := m.GetOperation().(*Operation_AccountCreate); ok {
		return x.AccountCreate
	}
	return nil
}

func (m *Operation) GetAccountCreateWithDelegation() *AccountCreateWithDelegationOperation {
	if x, ok := m.GetOperation().(*Operation_AccountCreateWithDelegation); ok {
		return x.AccountCreateWithDelegation
	}
	return nil
}

func (m *Operation) GetAccountUpdate() *AccountUpdateOperation {
	if x, ok := m.GetOperation().(*Operation_AccountUpdate); ok {
		return x.AccountUpdate
	}
	return nil
}

func (m *Operation) GetChannelAuthority() *ChallengeAuthorityOperation {
	if x, ok := m.GetOperation().(*Operation_ChannelAuthority); ok {
		return x.ChannelAuthority
	}
	return nil
}

func (m *Operation) GetProveAuthority() *ProveAuthorityOperation {
	if x, ok := m.GetOperation().(*Operation_ProveAuthority); ok {
		return x.ProveAuthority
	}
	return nil
}

func (m *Operation) GetRequestAccountRecovery() *RequestAccountRecoveryOperation {
	if x, ok := m.GetOperation().(*Operation_RequestAccountRecovery); ok {
		return x.RequestAccountRecovery
	}
	return nil
}

func (m *Operation) GetRecoverAccount() *RecoverAccountOperation {
	if x, ok := m.GetOperation().(*Operation_RecoverAccount); ok {
		return x.RecoverAccount
	}
	return nil
}

func (m *Operation) GetChangeRecoveryAccount() *ChangeRecoveryAccountOperation {
	if x, ok := m.GetOperation().(*Operation_ChangeRecoveryAccount); ok {
		return x.ChangeRecoveryAccount
	}
	return nil
}

func (m *Operation) GetResetAccount() *ResetAccountOperation {
	if x, ok := m.GetOperation().(*Operation_ResetAccount); ok {
		return x.ResetAccount
	}
	return nil
}

func (m *Operation) GetSetResetAccount() *SetResetAccountOperation {
	if x, ok := m.GetOperation().(*Operation_SetResetAccount); ok {
		return x.SetResetAccount
	}
	return nil
}

func (m *Operation) GetAccountWitnessVote() *AccountWitnessVoteOperation {
	if x, ok := m.GetOperation().(*Operation_AccountWitnessVote); ok {
		return x.AccountWitnessVote
	}
	return nil
}

func (m *Operation) GetAccountWitnessProxy() *AccountWitnessProxyOperation {
	if x, ok := m.GetOperation().(*Operation_AccountWitnessProxy); ok {
		return x.AccountWitnessProxy
	}
	return nil
}

func (m *Operation) GetDelegateVestingShares() *DelegateVestingSharesOperation {
	if x, ok := m.GetOperation().(*Operation_DelegateVestingShares); ok {
		return x.DelegateVestingShares
	}
	return nil
}

func (m *Operation) GetDeclineVotingRights() *DeclineVotingRightsOperation {
	if x, ok := m.GetOperation().(*Operation_DeclineVotingRights); ok {
		return x.DeclineVotingRights
	}
	return nil
}

func (m *Operation) GetWitnessUpdate() *WitnessUpdateOperation {
	if x, ok := m.GetOperation().(*Operation_WitnessUpdate); ok {
		return x.WitnessUpdate
	}
	return nil
}

func (m *Operation) GetFeedPublish() *FeedPublishOperation {
	if x, ok := m.GetOperation().(*Operation_FeedPublish); ok {
		return x.FeedPublish
	}
	return nil
}

func (m *Operation) GetPOW() *POWOperation {
	if x, ok := m.GetOperation().(*Operation_POW); ok {
		return x.POW
	}
	return nil
}

func (m *Operation) GetPOW2() *POW2Operation {
	if x, ok := m.GetOperation().(*Operation_POW2); ok {
		return x.POW2
	}
	return nil
}

func (m *Operation) GetReportOverProduction() *ReportOverProductionOperation {
	if x, ok := m.GetOperation().(*Operation_ReportOverProduction); ok {
		return x.ReportOverProduction
	}
	return nil
}

func (m *Operation) GetComment() *CommentOperation {
	if x, ok := m.GetOperation().(*Operation_Comment); ok {
		return x.Comment
	}
	return nil
}

func (m *Operation) GetCommentOptions() *CommentOptionsOperation {
	if x, ok := m.GetOperation().(*Operation_CommentOptions); ok {
		return x.CommentOptions
	}
	return nil
}

func (m *Operation) GetDeleteComment() *DeleteCommentOperation {
	if x, ok := m.GetOperation().(*Operation_DeleteComment); ok {
		return x.DeleteComment
	}
	return nil
}

func (m *Operation) GetVote() *VoteOperation {
	if x, ok := m.GetOperation().(*Operation_Vote); ok {
		return x.Vote
	}
	return nil
}

func (m *Operation) GetClaimRewardBalance() *ClaimRewardBalanceOperation {
	if x, ok := m.GetOperation().(*Operation_ClaimRewardBalance); ok {
		return x.ClaimRewardBalance
	}
	return nil
}

func (m *Operation) GetCustom() *CustomOperation {
	if x, ok := m.GetOperation().(*Operation_Custom); ok {
		return x.Custom
	}
	return nil
}

func (m *Operation) GetCustomJSON() *CustomJSONOperation {
	if x, ok := m.GetOperation().(*Operation_CustomJSON); ok {
		return x.CustomJSON
	}
	return nil
}

func (m *Operation) GetCustomBinary() *CustomBinaryOperation {
	if x, ok := m.GetOperation().(*Operation_CustomBinary); ok {
		return x.CustomBinary
	}
	return nil
}

func (m *Operation) GetTransfer() *TransferOperation {
	if x, ok := m.GetOperation().(*Operation_Transfer); ok {
		return x.Transfer
	}
	return nil
}

func (m *Operation) GetTransferToVesting() *TransferToVestingOperation {
	if x, ok := m.GetOperation().(*Operation_TransferToVesting); ok {
		return x.TransferToVesting
	}
	return nil
}

func (m *Operation) GetWithdrawVesting() *WithdrawVestingOperation {
	if x, ok := m.GetOperation().(*Operation_WithdrawVesting); ok {
		return x.WithdrawVesting
	}
	return nil
}

func (m *Operation) GetSetWithdrawVestingRoute() *SetWithdrawVestingRouteOperation {
	if x, ok := m.GetOperation().(*Operation_SetWithdrawVestingRoute); ok {
		return x.SetWithdrawVestingRoute
	}
	return nil
}

func (m *Operation) GetTransferToSavings() *TransferToSavingsOperation {
	if x, ok := m.GetOperation().(*Operation_TransferToSavings); ok {
		return x.TransferToSavings
	}
	return nil
}

func (m *Operation) GetTransferFromSavings() *TransferFromSavingsOperation {
	if x, ok := m.GetOperation().(*Operation_TransferFromSavings); ok {
		return x.TransferFromSavings
	}
	return nil
}

func (m *Operation) GetCancelTransferFromSavings() *CancelTransferFromSavingsOperation {
	if x, ok := m.GetOperation().(*Operation_CancelTransferFromSavings); ok {
		return x.CancelTransferFromSavings
	}
	return nil
}

func (m *Operation) GetConvert() *ConvertOperation {
	if x, ok := m.GetOperation().(*Operation_Convert); ok {
		return x.Convert
	}
	return nil
}

func (m *Operation) GetLimitOrderCreate() *LimitOrderCreateOperation {
	if x, ok := m.GetOperation().(*Operation_LimitOrderCreate); ok {
		return x.LimitOrderCreate
	}
	return nil
}

func (m *Operation) GetLimitOrderCreate2() *LimitOrderCreate2Operation {
	if x, ok := m.GetOperation().(*Operation_LimitOrderCreate2); ok {
		return x.LimitOrderCreate2
	}
	return nil
}

func (m *Operation) GetLimitOrderCancel() *LimitOrderCancelOperation {
	if x, ok := m.GetOperation().(*Operation_LimitOrderCancel); ok {
		return x.LimitOrderCancel
	}
	return nil
}

func (m *Operation) GetEscrowTransfer() *EscrowTransferOperation {
	if x, ok := m.GetOperation().(*Operation_EscrowTransfer); ok {
		return x.EscrowTransfer
	}
	return nil
}

func (m *Operation) GetEscrowDispute() *EscrowDisputeOperation {
	if x, ok := m.GetOperation().(*Operation_EscrowDispute); ok {
		return x.EscrowDispute
	}
	return nil
}

func (m *Operation) GetEscrowRelease() *EscrowReleaseOperation {
	if x, ok := m.GetOperation().(*Operation_EscrowRelease); ok {
		return x.EscrowRelease
	}
	return nil
}

func (m *Operation) GetEscrowApprove() *EscrowApproveOperation {
	if x, ok := m.GetOperation().(*Operation_EscrowApprove); ok {
		return x.EscrowApprove
	}
	return nil
}

func (m *Operation) GetFillConvertRequest() *FillConvertRequestOperation {
	if x, ok := m.GetOperation().(*Operation_FillConvertRequest); ok {
		return x.FillConvertRequest
	}
	return nil
}

func (m *Operation) GetAuthorReward() *AuthorRewardOperation {
	if x, ok := m.GetOperation().(*Operation_AuthorReward); ok {
		return x.AuthorReward
	}
	return nil
}

func (m *Operation) GetCurationReward() *CurationRewardOperation {
	if x, ok := m.GetOperation().(*Operation_CurationReward); ok {
		return x.CurationReward
	}
	return nil
}

func (m *Operation) GetCommentReward() *CommentRewardOperation {
	if x, ok := m.GetOperation().(*Operation_CommentReward); ok {
		return x.CommentReward
	}
	return nil
}

func (m *Operation) GetLiquidityReward() *LiquidityRewardOperation {
	if x, ok := m.GetOperation().(*Operation_LiquidityReward); ok {
		return x.LiquidityReward
	}
	return nil
}

func (m *Operation) GetInterest() *InterestOperation {
	if x, ok := m.GetOperation().(*Operation_Interest); ok {
		return x.Interest
	}
	return nil
}

func (m *Operation) GetFillVestingWithdraw() *FillVestingWithdrawOperation {
	if x, ok := m.GetOperation().(*Operation_FillVestingWithdraw); ok {
		return x.FillVestingWithdraw
	}
	return nil
}

func (m *Operation) GetFillOrder() *FillOrderOperation {
	if x, ok := m.GetOperation().(*Operation_FillOrder); ok {
		return x.FillOrder
	}
	return nil
}

func (m *Operation) GetShutdownWitness() *ShutdownWitnessOperation {
	if x, ok := m.GetOperation().(*Operation_ShutdownWitness); ok {
		return x.ShutdownWitness
	}
	return nil
}

func (m *Operation) GetFillTransferFromSavings() *FillTransferFromSavingsOperation {
	if x, ok := m.GetOperation().(*Operation_FillTransferFromSavings); ok {
		return x.FillTransferFromSavings
	}
	return nil
}

func (m *Operation) GetHardfork() *HardforkOperation {
	if x, ok := m.GetOperation().(*Operation_Hardfork); ok {
		return x.Hardfork
	}
	return nil
}

func (m *Operation) GetCommentPayoutUpdate() *CommentPayoutUpdateOperation {
	if x, ok := m.GetOperation().(*Operation_CommentPayoutUpdate); ok {
		return x.CommentPayoutUpdate
	}
	return nil
}

func (m *Operation) GetReturnVestingDelegation() *ReturnVestingDelegationOperation {
	if x, ok := m.GetOperation().(*Operation_ReturnVestingDelegation); ok {
		return x.ReturnVestingDelegation
	}
	return nil
}

func (m *Operation) GetRewardBenefactorReward() *CommentBenefactorRewardOperation {
	if x, ok := m.GetOperation().(*Operation_RewardBenefactorReward); ok {
		return x.RewardBenefactorReward
	}
	return nil
}

func (m *Operation) GetProducerReward() *ProducerRewardOperation {
	if x, ok := m.GetOperation().(*Operation_ProducerReward); ok {
		return x.ProducerReward
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Operation) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Operation_OneofMarshaler, _Operation_OneofUnmarshaler, _Operation_OneofSizer, []interface{}{
		(*Operation_AccountCreate)(nil),
		(*Operation_AccountCreateWithDelegation)(nil),
		(*Operation_AccountUpdate)(nil),
		(*Operation_ChannelAuthority)(nil),
		(*Operation_ProveAuthority)(nil),
		(*Operation_RequestAccountRecovery)(nil),
		(*Operation_RecoverAccount)(nil),
		(*Operation_ChangeRecoveryAccount)(nil),
		(*Operation_ResetAccount)(nil),
		(*Operation_SetResetAccount)(nil),
		(*Operation_AccountWitnessVote)(nil),
		(*Operation_AccountWitnessProxy)(nil),
		(*Operation_DelegateVestingShares)(nil),
		(*Operation_DeclineVotingRights)(nil),
		(*Operation_WitnessUpdate)(nil),
		(*Operation_FeedPublish)(nil),
		(*Operation_POW)(nil),
		(*Operation_POW2)(nil),
		(*Operation_ReportOverProduction)(nil),
		(*Operation_Comment)(nil),
		(*Operation_CommentOptions)(nil),
		(*Operation_DeleteComment)(nil),
		(*Operation_Vote)(nil),
		(*Operation_ClaimRewardBalance)(nil),
		(*Operation_Custom)(nil),
		(*Operation_CustomJSON)(nil),
		(*Operation_CustomBinary)(nil),
		(*Operation_Transfer)(nil),
		(*Operation_TransferToVesting)(nil),
		(*Operation_WithdrawVesting)(nil),
		(*Operation_SetWithdrawVestingRoute)(nil),
		(*Operation_TransferToSavings)(nil),
		(*Operation_TransferFromSavings)(nil),
		(*Operation_CancelTransferFromSavings)(nil),
		(*Operation_Convert)(nil),
		(*Operation_LimitOrderCreate)(nil),
		(*Operation_LimitOrderCreate2)(nil),
		(*Operation_LimitOrderCancel)(nil),
		(*Operation_EscrowTransfer)(nil),
		(*Operation_EscrowDispute)(nil),
		(*Operation_EscrowRelease)(nil),
		(*Operation_EscrowApprove)(nil),
		(*Operation_FillConvertRequest)(nil),
		(*Operation_AuthorReward)(nil),
		(*Operation_CurationReward)(nil),
		(*Operation_CommentReward)(nil),
		(*Operation_LiquidityReward)(nil),
		(*Operation_Interest)(nil),
		(*Operation_FillVestingWithdraw)(nil),
		(*Operation_FillOrder)(nil),
		(*Operation_ShutdownWitness)(nil),
		(*Operation_FillTransferFromSavings)(nil),
		(*Operation_Hardfork)(nil),
		(*Operation_CommentPayoutUpdate)(nil),
		(*Operation_ReturnVestingDelegation)(nil),
		(*Operation_RewardBenefactorReward)(nil),
		(*Operation_ProducerReward)(nil),
	}
}

func _Operation_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Operation)
	// operation
	switch x := m.Operation.(type) {
	case *Operation_AccountCreate:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AccountCreate); err != nil {
			return err
		}
	case *Operation_AccountCreateWithDelegation:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AccountCreateWithDelegation); err != nil {
			return err
		}
	case *Operation_AccountUpdate:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AccountUpdate); err != nil {
			return err
		}
	case *Operation_ChannelAuthority:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ChannelAuthority); err != nil {
			return err
		}
	case *Operation_ProveAuthority:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ProveAuthority); err != nil {
			return err
		}
	case *Operation_RequestAccountRecovery:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RequestAccountRecovery); err != nil {
			return err
		}
	case *Operation_RecoverAccount:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RecoverAccount); err != nil {
			return err
		}
	case *Operation_ChangeRecoveryAccount:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ChangeRecoveryAccount); err != nil {
			return err
		}
	case *Operation_ResetAccount:
		_ = b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ResetAccount); err != nil {
			return err
		}
	case *Operation_SetResetAccount:
		_ = b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SetResetAccount); err != nil {
			return err
		}
	case *Operation_AccountWitnessVote:
		_ = b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AccountWitnessVote); err != nil {
			return err
		}
	case *Operation_AccountWitnessProxy:
		_ = b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AccountWitnessProxy); err != nil {
			return err
		}
	case *Operation_DelegateVestingShares:
		_ = b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DelegateVestingShares); err != nil {
			return err
		}
	case *Operation_DeclineVotingRights:
		_ = b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DeclineVotingRights); err != nil {
			return err
		}
	case *Operation_WitnessUpdate:
		_ = b.EncodeVarint(30<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.WitnessUpdate); err != nil {
			return err
		}
	case *Operation_FeedPublish:
		_ = b.EncodeVarint(31<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.FeedPublish); err != nil {
			return err
		}
	case *Operation_POW:
		_ = b.EncodeVarint(40<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.POW); err != nil {
			return err
		}
	case *Operation_POW2:
		_ = b.EncodeVarint(41<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.POW2); err != nil {
			return err
		}
	case *Operation_ReportOverProduction:
		_ = b.EncodeVarint(42<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ReportOverProduction); err != nil {
			return err
		}
	case *Operation_Comment:
		_ = b.EncodeVarint(50<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Comment); err != nil {
			return err
		}
	case *Operation_CommentOptions:
		_ = b.EncodeVarint(51<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CommentOptions); err != nil {
			return err
		}
	case *Operation_DeleteComment:
		_ = b.EncodeVarint(52<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DeleteComment); err != nil {
			return err
		}
	case *Operation_Vote:
		_ = b.EncodeVarint(53<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Vote); err != nil {
			return err
		}
	case *Operation_ClaimRewardBalance:
		_ = b.EncodeVarint(54<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ClaimRewardBalance); err != nil {
			return err
		}
	case *Operation_Custom:
		_ = b.EncodeVarint(70<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Custom); err != nil {
			return err
		}
	case *Operation_CustomJSON:
		_ = b.EncodeVarint(71<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CustomJSON); err != nil {
			return err
		}
	case *Operation_CustomBinary:
		_ = b.EncodeVarint(72<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CustomBinary); err != nil {
			return err
		}
	case *Operation_Transfer:
		_ = b.EncodeVarint(80<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Transfer); err != nil {
			return err
		}
	case *Operation_TransferToVesting:
		_ = b.EncodeVarint(81<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TransferToVesting); err != nil {
			return err
		}
	case *Operation_WithdrawVesting:
		_ = b.EncodeVarint(82<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.WithdrawVesting); err != nil {
			return err
		}
	case *Operation_SetWithdrawVestingRoute:
		_ = b.EncodeVarint(83<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SetWithdrawVestingRoute); err != nil {
			return err
		}
	case *Operation_TransferToSavings:
		_ = b.EncodeVarint(84<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TransferToSavings); err != nil {
			return err
		}
	case *Operation_TransferFromSavings:
		_ = b.EncodeVarint(85<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TransferFromSavings); err != nil {
			return err
		}
	case *Operation_CancelTransferFromSavings:
		_ = b.EncodeVarint(86<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CancelTransferFromSavings); err != nil {
			return err
		}
	case *Operation_Convert:
		_ = b.EncodeVarint(87<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Convert); err != nil {
			return err
		}
	case *Operation_LimitOrderCreate:
		_ = b.EncodeVarint(88<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.LimitOrderCreate); err != nil {
			return err
		}
	case *Operation_LimitOrderCreate2:
		_ = b.EncodeVarint(99<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.LimitOrderCreate2); err != nil {
			return err
		}
	case *Operation_LimitOrderCancel:
		_ = b.EncodeVarint(90<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.LimitOrderCancel); err != nil {
			return err
		}
	case *Operation_EscrowTransfer:
		_ = b.EncodeVarint(91<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EscrowTransfer); err != nil {
			return err
		}
	case *Operation_EscrowDispute:
		_ = b.EncodeVarint(92<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EscrowDispute); err != nil {
			return err
		}
	case *Operation_EscrowRelease:
		_ = b.EncodeVarint(93<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EscrowRelease); err != nil {
			return err
		}
	case *Operation_EscrowApprove:
		_ = b.EncodeVarint(94<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EscrowApprove); err != nil {
			return err
		}
	case *Operation_FillConvertRequest:
		_ = b.EncodeVarint(100<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.FillConvertRequest); err != nil {
			return err
		}
	case *Operation_AuthorReward:
		_ = b.EncodeVarint(101<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AuthorReward); err != nil {
			return err
		}
	case *Operation_CurationReward:
		_ = b.EncodeVarint(102<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CurationReward); err != nil {
			return err
		}
	case *Operation_CommentReward:
		_ = b.EncodeVarint(103<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CommentReward); err != nil {
			return err
		}
	case *Operation_LiquidityReward:
		_ = b.EncodeVarint(104<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.LiquidityReward); err != nil {
			return err
		}
	case *Operation_Interest:
		_ = b.EncodeVarint(105<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Interest); err != nil {
			return err
		}
	case *Operation_FillVestingWithdraw:
		_ = b.EncodeVarint(106<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.FillVestingWithdraw); err != nil {
			return err
		}
	case *Operation_FillOrder:
		_ = b.EncodeVarint(107<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.FillOrder); err != nil {
			return err
		}
	case *Operation_ShutdownWitness:
		_ = b.EncodeVarint(108<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ShutdownWitness); err != nil {
			return err
		}
	case *Operation_FillTransferFromSavings:
		_ = b.EncodeVarint(109<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.FillTransferFromSavings); err != nil {
			return err
		}
	case *Operation_Hardfork:
		_ = b.EncodeVarint(110<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Hardfork); err != nil {
			return err
		}
	case *Operation_CommentPayoutUpdate:
		_ = b.EncodeVarint(111<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CommentPayoutUpdate); err != nil {
			return err
		}
	case *Operation_ReturnVestingDelegation:
		_ = b.EncodeVarint(112<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ReturnVestingDelegation); err != nil {
			return err
		}
	case *Operation_RewardBenefactorReward:
		_ = b.EncodeVarint(113<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RewardBenefactorReward); err != nil {
			return err
		}
	case *Operation_ProducerReward:
		_ = b.EncodeVarint(114<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ProducerReward); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Operation.Operation has unexpected type %T", x)
	}
	return nil
}

func _Operation_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Operation)
	switch tag {
	case 1: // operation.account_create
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AccountCreateOperation)
		err := b.DecodeMessage(msg)
		m.Operation = &Operation_AccountCreate{msg}
		return true, err
	case 2: // operation.account_create_with_delegation
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AccountCreateWithDelegationOperation)
		err := b.DecodeMessage(msg)
		m.Operation = &Operation_AccountCreateWithDelegation{msg}
		return true, err
	case 3: // operation.account_update
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AccountUpdateOperation)
		err := b.DecodeMessage(msg)
		m.Operation = &Operation_AccountUpdate{msg}
		return true, err
	case 4: // operation.channel_authority
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ChallengeAuthorityOperation)
		err := b.DecodeMessage(msg)
		m.Operation = &Operation_ChannelAuthority{msg}
		return true, err
	case 5: // operation.prove_authority
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ProveAuthorityOperation)
		err := b.DecodeMessage(msg)
		m.Operation = &Operation_ProveAuthority{msg}
		return true, err
	case 6: // operation.request_account_recovery
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestAccountRecoveryOperation)
		err := b.DecodeMessage(msg)
		m.Operation = &Operation_RequestAccountRecovery{msg}
		return true, err
	case 7: // operation.recover_account
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RecoverAccountOperation)
		err := b.DecodeMessage(msg)
		m.Operation = &Operation_RecoverAccount{msg}
		return true, err
	case 8: // operation.change_recovery_account
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ChangeRecoveryAccountOperation)
		err := b.DecodeMessage(msg)
		m.Operation = &Operation_ChangeRecoveryAccount{msg}
		return true, err
	case 9: // operation.reset_account
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ResetAccountOperation)
		err := b.DecodeMessage(msg)
		m.Operation = &Operation_ResetAccount{msg}
		return true, err
	case 10: // operation.set_reset_account
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SetResetAccountOperation)
		err := b.DecodeMessage(msg)
		m.Operation = &Operation_SetResetAccount{msg}
		return true, err
	case 11: // operation.account_witness_vote
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AccountWitnessVoteOperation)
		err := b.DecodeMessage(msg)
		m.Operation = &Operation_AccountWitnessVote{msg}
		return true, err
	case 12: // operation.account_witness_proxy
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AccountWitnessProxyOperation)
		err := b.DecodeMessage(msg)
		m.Operation = &Operation_AccountWitnessProxy{msg}
		return true, err
	case 13: // operation.delegate_vesting_shares
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DelegateVestingSharesOperation)
		err := b.DecodeMessage(msg)
		m.Operation = &Operation_DelegateVestingShares{msg}
		return true, err
	case 14: // operation.decline_voting_rights
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DeclineVotingRightsOperation)
		err := b.DecodeMessage(msg)
		m.Operation = &Operation_DeclineVotingRights{msg}
		return true, err
	case 30: // operation.witness_update
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(WitnessUpdateOperation)
		err := b.DecodeMessage(msg)
		m.Operation = &Operation_WitnessUpdate{msg}
		return true, err
	case 31: // operation.feed_publish
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FeedPublishOperation)
		err := b.DecodeMessage(msg)
		m.Operation = &Operation_FeedPublish{msg}
		return true, err
	case 40: // operation.pow
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(POWOperation)
		err := b.DecodeMessage(msg)
		m.Operation = &Operation_POW{msg}
		return true, err
	case 41: // operation.pow2
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(POW2Operation)
		err := b.DecodeMessage(msg)
		m.Operation = &Operation_POW2{msg}
		return true, err
	case 42: // operation.report_over_production
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReportOverProductionOperation)
		err := b.DecodeMessage(msg)
		m.Operation = &Operation_ReportOverProduction{msg}
		return true, err
	case 50: // operation.comment
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CommentOperation)
		err := b.DecodeMessage(msg)
		m.Operation = &Operation_Comment{msg}
		return true, err
	case 51: // operation.comment_options
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CommentOptionsOperation)
		err := b.DecodeMessage(msg)
		m.Operation = &Operation_CommentOptions{msg}
		return true, err
	case 52: // operation.delete_comment
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DeleteCommentOperation)
		err := b.DecodeMessage(msg)
		m.Operation = &Operation_DeleteComment{msg}
		return true, err
	case 53: // operation.vote
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(VoteOperation)
		err := b.DecodeMessage(msg)
		m.Operation = &Operation_Vote{msg}
		return true, err
	case 54: // operation.claim_reward_balance
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ClaimRewardBalanceOperation)
		err := b.DecodeMessage(msg)
		m.Operation = &Operation_ClaimRewardBalance{msg}
		return true, err
	case 70: // operation.custom
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CustomOperation)
		err := b.DecodeMessage(msg)
		m.Operation = &Operation_Custom{msg}
		return true, err
	case 71: // operation.custom_json
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CustomJSONOperation)
		err := b.DecodeMessage(msg)
		m.Operation = &Operation_CustomJSON{msg}
		return true, err
	case 72: // operation.custom_binary
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CustomBinaryOperation)
		err := b.DecodeMessage(msg)
		m.Operation = &Operation_CustomBinary{msg}
		return true, err
	case 80: // operation.transfer
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TransferOperation)
		err := b.DecodeMessage(msg)
		m.Operation = &Operation_Transfer{msg}
		return true, err
	case 81: // operation.transfer_to_vesting
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TransferToVestingOperation)
		err := b.DecodeMessage(msg)
		m.Operation = &Operation_TransferToVesting{msg}
		return true, err
	case 82: // operation.withdraw_vesting
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(WithdrawVestingOperation)
		err := b.DecodeMessage(msg)
		m.Operation = &Operation_WithdrawVesting{msg}
		return true, err
	case 83: // operation.set_withdraw_vesting_route
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SetWithdrawVestingRouteOperation)
		err := b.DecodeMessage(msg)
		m.Operation = &Operation_SetWithdrawVestingRoute{msg}
		return true, err
	case 84: // operation.transfer_to_savings
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TransferToSavingsOperation)
		err := b.DecodeMessage(msg)
		m.Operation = &Operation_TransferToSavings{msg}
		return true, err
	case 85: // operation.transfer_from_savings
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TransferFromSavingsOperation)
		err := b.DecodeMessage(msg)
		m.Operation = &Operation_TransferFromSavings{msg}
		return true, err
	case 86: // operation.cancel_transfer_from_savings
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CancelTransferFromSavingsOperation)
		err := b.DecodeMessage(msg)
		m.Operation = &Operation_CancelTransferFromSavings{msg}
		return true, err
	case 87: // operation.convert
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ConvertOperation)
		err := b.DecodeMessage(msg)
		m.Operation = &Operation_Convert{msg}
		return true, err
	case 88: // operation.limit_order_create
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(LimitOrderCreateOperation)
		err := b.DecodeMessage(msg)
		m.Operation = &Operation_LimitOrderCreate{msg}
		return true, err
	case 99: // operation.limit_order_create2
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(LimitOrderCreate2Operation)
		err := b.DecodeMessage(msg)
		m.Operation = &Operation_LimitOrderCreate2{msg}
		return true, err
	case 90: // operation.limit_order_cancel
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(LimitOrderCancelOperation)
		err := b.DecodeMessage(msg)
		m.Operation = &Operation_LimitOrderCancel{msg}
		return true, err
	case 91: // operation.escrow_transfer
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(EscrowTransferOperation)
		err := b.DecodeMessage(msg)
		m.Operation = &Operation_EscrowTransfer{msg}
		return true, err
	case 92: // operation.escrow_dispute
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(EscrowDisputeOperation)
		err := b.DecodeMessage(msg)
		m.Operation = &Operation_EscrowDispute{msg}
		return true, err
	case 93: // operation.escrow_release
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(EscrowReleaseOperation)
		err := b.DecodeMessage(msg)
		m.Operation = &Operation_EscrowRelease{msg}
		return true, err
	case 94: // operation.escrow_approve
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(EscrowApproveOperation)
		err := b.DecodeMessage(msg)
		m.Operation = &Operation_EscrowApprove{msg}
		return true, err
	case 100: // operation.fill_convert_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FillConvertRequestOperation)
		err := b.DecodeMessage(msg)
		m.Operation = &Operation_FillConvertRequest{msg}
		return true, err
	case 101: // operation.author_reward
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AuthorRewardOperation)
		err := b.DecodeMessage(msg)
		m.Operation = &Operation_AuthorReward{msg}
		return true, err
	case 102: // operation.curation_reward
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CurationRewardOperation)
		err := b.DecodeMessage(msg)
		m.Operation = &Operation_CurationReward{msg}
		return true, err
	case 103: // operation.comment_reward
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CommentRewardOperation)
		err := b.DecodeMessage(msg)
		m.Operation = &Operation_CommentReward{msg}
		return true, err
	case 104: // operation.liquidity_reward
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(LiquidityRewardOperation)
		err := b.DecodeMessage(msg)
		m.Operation = &Operation_LiquidityReward{msg}
		return true, err
	case 105: // operation.interest
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(InterestOperation)
		err := b.DecodeMessage(msg)
		m.Operation = &Operation_Interest{msg}
		return true, err
	case 106: // operation.fill_vesting_withdraw
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FillVestingWithdrawOperation)
		err := b.DecodeMessage(msg)
		m.Operation = &Operation_FillVestingWithdraw{msg}
		return true, err
	case 107: // operation.fill_order
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FillOrderOperation)
		err := b.DecodeMessage(msg)
		m.Operation = &Operation_FillOrder{msg}
		return true, err
	case 108: // operation.shutdown_witness
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ShutdownWitnessOperation)
		err := b.DecodeMessage(msg)
		m.Operation = &Operation_ShutdownWitness{msg}
		return true, err
	case 109: // operation.fill_transfer_from_savings
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FillTransferFromSavingsOperation)
		err := b.DecodeMessage(msg)
		m.Operation = &Operation_FillTransferFromSavings{msg}
		return true, err
	case 110: // operation.hardfork
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HardforkOperation)
		err := b.DecodeMessage(msg)
		m.Operation = &Operation_Hardfork{msg}
		return true, err
	case 111: // operation.comment_payout_update
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CommentPayoutUpdateOperation)
		err := b.DecodeMessage(msg)
		m.Operation = &Operation_CommentPayoutUpdate{msg}
		return true, err
	case 112: // operation.return_vesting_delegation
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReturnVestingDelegationOperation)
		err := b.DecodeMessage(msg)
		m.Operation = &Operation_ReturnVestingDelegation{msg}
		return true, err
	case 113: // operation.reward_benefactor_reward
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CommentBenefactorRewardOperation)
		err := b.DecodeMessage(msg)
		m.Operation = &Operation_RewardBenefactorReward{msg}
		return true, err
	case 114: // operation.producer_reward
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ProducerRewardOperation)
		err := b.DecodeMessage(msg)
		m.Operation = &Operation_ProducerReward{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Operation_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Operation)
	// operation
	switch x := m.Operation.(type) {
	case *Operation_AccountCreate:
		s := proto.Size(x.AccountCreate)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Operation_AccountCreateWithDelegation:
		s := proto.Size(x.AccountCreateWithDelegation)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Operation_AccountUpdate:
		s := proto.Size(x.AccountUpdate)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Operation_ChannelAuthority:
		s := proto.Size(x.ChannelAuthority)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Operation_ProveAuthority:
		s := proto.Size(x.ProveAuthority)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Operation_RequestAccountRecovery:
		s := proto.Size(x.RequestAccountRecovery)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Operation_RecoverAccount:
		s := proto.Size(x.RecoverAccount)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Operation_ChangeRecoveryAccount:
		s := proto.Size(x.ChangeRecoveryAccount)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Operation_ResetAccount:
		s := proto.Size(x.ResetAccount)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Operation_SetResetAccount:
		s := proto.Size(x.SetResetAccount)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Operation_AccountWitnessVote:
		s := proto.Size(x.AccountWitnessVote)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Operation_AccountWitnessProxy:
		s := proto.Size(x.AccountWitnessProxy)
		n += proto.SizeVarint(12<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Operation_DelegateVestingShares:
		s := proto.Size(x.DelegateVestingShares)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Operation_DeclineVotingRights:
		s := proto.Size(x.DeclineVotingRights)
		n += proto.SizeVarint(14<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Operation_WitnessUpdate:
		s := proto.Size(x.WitnessUpdate)
		n += proto.SizeVarint(30<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Operation_FeedPublish:
		s := proto.Size(x.FeedPublish)
		n += proto.SizeVarint(31<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Operation_POW:
		s := proto.Size(x.POW)
		n += proto.SizeVarint(40<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Operation_POW2:
		s := proto.Size(x.POW2)
		n += proto.SizeVarint(41<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Operation_ReportOverProduction:
		s := proto.Size(x.ReportOverProduction)
		n += proto.SizeVarint(42<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Operation_Comment:
		s := proto.Size(x.Comment)
		n += proto.SizeVarint(50<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Operation_CommentOptions:
		s := proto.Size(x.CommentOptions)
		n += proto.SizeVarint(51<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Operation_DeleteComment:
		s := proto.Size(x.DeleteComment)
		n += proto.SizeVarint(52<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Operation_Vote:
		s := proto.Size(x.Vote)
		n += proto.SizeVarint(53<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Operation_ClaimRewardBalance:
		s := proto.Size(x.ClaimRewardBalance)
		n += proto.SizeVarint(54<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Operation_Custom:
		s := proto.Size(x.Custom)
		n += proto.SizeVarint(70<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Operation_CustomJSON:
		s := proto.Size(x.CustomJSON)
		n += proto.SizeVarint(71<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Operation_CustomBinary:
		s := proto.Size(x.CustomBinary)
		n += proto.SizeVarint(72<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Operation_Transfer:
		s := proto.Size(x.Transfer)
		n += proto.SizeVarint(80<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Operation_TransferToVesting:
		s := proto.Size(x.TransferToVesting)
		n += proto.SizeVarint(81<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Operation_WithdrawVesting:
		s := proto.Size(x.WithdrawVesting)
		n += proto.SizeVarint(82<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Operation_SetWithdrawVestingRoute:
		s := proto.Size(x.SetWithdrawVestingRoute)
		n += proto.SizeVarint(83<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Operation_TransferToSavings:
		s := proto.Size(x.TransferToSavings)
		n += proto.SizeVarint(84<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Operation_TransferFromSavings:
		s := proto.Size(x.TransferFromSavings)
		n += proto.SizeVarint(85<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Operation_CancelTransferFromSavings:
		s := proto.Size(x.CancelTransferFromSavings)
		n += proto.SizeVarint(86<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Operation_Convert:
		s := proto.Size(x.Convert)
		n += proto.SizeVarint(87<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Operation_LimitOrderCreate:
		s := proto.Size(x.LimitOrderCreate)
		n += proto.SizeVarint(88<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Operation_LimitOrderCreate2:
		s := proto.Size(x.LimitOrderCreate2)
		n += proto.SizeVarint(99<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Operation_LimitOrderCancel:
		s := proto.Size(x.LimitOrderCancel)
		n += proto.SizeVarint(90<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Operation_EscrowTransfer:
		s := proto.Size(x.EscrowTransfer)
		n += proto.SizeVarint(91<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Operation_EscrowDispute:
		s := proto.Size(x.EscrowDispute)
		n += proto.SizeVarint(92<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Operation_EscrowRelease:
		s := proto.Size(x.EscrowRelease)
		n += proto.SizeVarint(93<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Operation_EscrowApprove:
		s := proto.Size(x.EscrowApprove)
		n += proto.SizeVarint(94<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Operation_FillConvertRequest:
		s := proto.Size(x.FillConvertRequest)
		n += proto.SizeVarint(100<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Operation_AuthorReward:
		s := proto.Size(x.AuthorReward)
		n += proto.SizeVarint(101<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Operation_CurationReward:
		s := proto.Size(x.CurationReward)
		n += proto.SizeVarint(102<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Operation_CommentReward:
		s := proto.Size(x.CommentReward)
		n += proto.SizeVarint(103<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Operation_LiquidityReward:
		s := proto.Size(x.LiquidityReward)
		n += proto.SizeVarint(104<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Operation_Interest:
		s := proto.Size(x.Interest)
		n += proto.SizeVarint(105<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Operation_FillVestingWithdraw:
		s := proto.Size(x.FillVestingWithdraw)
		n += proto.SizeVarint(106<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Operation_FillOrder:
		s := proto.Size(x.FillOrder)
		n += proto.SizeVarint(107<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Operation_ShutdownWitness:
		s := proto.Size(x.ShutdownWitness)
		n += proto.SizeVarint(108<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Operation_FillTransferFromSavings:
		s := proto.Size(x.FillTransferFromSavings)
		n += proto.SizeVarint(109<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Operation_Hardfork:
		s := proto.Size(x.Hardfork)
		n += proto.SizeVarint(110<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Operation_CommentPayoutUpdate:
		s := proto.Size(x.CommentPayoutUpdate)
		n += proto.SizeVarint(111<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Operation_ReturnVestingDelegation:
		s := proto.Size(x.ReturnVestingDelegation)
		n += proto.SizeVarint(112<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Operation_RewardBenefactorReward:
		s := proto.Size(x.RewardBenefactorReward)
		n += proto.SizeVarint(113<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Operation_ProducerReward:
		s := proto.Size(x.ProducerReward)
		n += proto.SizeVarint(114<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*Operation)(nil), "steemwatch.steem.Operation")
}

func init() { proto.RegisterFile("operation.proto", fileDescriptorOperation) }

var fileDescriptorOperation = []byte{
	// 1794 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x59, 0xed, 0x57, 0xd4, 0xb8,
	0x17, 0xc6, 0x9f, 0xfc, 0x44, 0x82, 0xbc, 0x18, 0x14, 0x22, 0x2a, 0x83, 0x22, 0x0a, 0xb8, 0xe2,
	0x2e, 0xbe, 0x7c, 0xf1, 0x9c, 0xdd, 0x03, 0x22, 0xcb, 0xba, 0x1e, 0xc1, 0x01, 0xc1, 0xa3, 0xae,
	0x3d, 0x9d, 0x36, 0x33, 0x53, 0xed, 0x34, 0x25, 0x6d, 0x99, 0xf5, 0xc3, 0x7e, 0xd8, 0x7f, 0xd4,
	0x0f, 0xfe, 0x25, 0x7b, 0x72, 0x9b, 0x96, 0xa6, 0x49, 0x06, 0xbf, 0x31, 0x7d, 0x9e, 0x3c, 0x37,
	0x2f, 0x37, 0xf7, 0xde, 0x5c, 0xd0, 0x24, 0x8b, 0x29, 0x77, 0xd3, 0x80, 0x45, 0x6b, 0x31, 0x67,
	0x29, 0xc3, 0x53, 0x49, 0x4a, 0x69, 0xaf, 0xef, 0xa6, 0x5e, 0x77, 0x0d, 0xfe, 0x9c, 0x7b, 0xd0,
	0x09, 0xd2, 0x6e, 0xd6, 0x5a, 0xf3, 0x58, 0xef, 0x61, 0x87, 0x75, 0xd8, 0x43, 0x20, 0xb6, 0xb2,
	0x36, 0xfc, 0x82, 0x1f, 0xf0, 0x57, 0x2e, 0x30, 0x37, 0xef, 0x7a, 0x1e, 0xcb, 0xa2, 0xd4, 0xf1,
	0x38, 0x75, 0x53, 0xea, 0xd4, 0x0c, 0xcc, 0xad, 0xd5, 0xf0, 0x7e, 0x90, 0x76, 0x1d, 0x9f, 0x86,
	0xb4, 0x03, 0x2c, 0x8d, 0x5f, 0xea, 0x65, 0xb1, 0x6f, 0xd2, 0x5b, 0x2a, 0xf0, 0x7e, 0x90, 0x46,
	0x34, 0x49, 0x9c, 0x98, 0xb3, 0xbf, 0xbf, 0x6a, 0xb4, 0x3b, 0x75, 0xda, 0x09, 0x33, 0x88, 0xdd,
	0x74, 0xb3, 0xb4, 0xcb, 0xb8, 0xc3, 0x69, 0xdf, 0xe5, 0xbe, 0x06, 0xdf, 0xf7, 0xdc, 0xc8, 0xa3,
	0xa1, 0x93, 0x72, 0x37, 0x6a, 0x53, 0xee, 0xb4, 0x39, 0xeb, 0x39, 0x89, 0x7b, 0x12, 0x44, 0x9d,
	0x44, 0x23, 0x2f, 0x7a, 0x5d, 0x37, 0x0c, 0x69, 0xd4, 0xa1, 0x4e, 0xae, 0x1a, 0xa4, 0xfa, 0xb4,
	0xee, 0x79, 0x5d, 0x57, 0x30, 0x38, 0xf5, 0xd8, 0x09, 0xe5, 0x5f, 0x9d, 0x62, 0x9a, 0xda, 0xfc,
	0xbd, 0xd0, 0x0d, 0x7a, 0xc5, 0xc4, 0x5a, 0x6e, 0x28, 0x66, 0xa2, 0xb1, 0x66, 0x3d, 0x16, 0x9d,
	0x50, 0xae, 0x0f, 0x5f, 0xf1, 0x58, 0xaf, 0x47, 0xa3, 0xd4, 0x69, 0xd1, 0x88, 0xb6, 0x5d, 0x2f,
	0xb5, 0x2f, 0x72, 0xb6, 0xa0, 0xd6, 0x81, 0xc6, 0x29, 0x20, 0xbe, 0xea, 0x2b, 0x5e, 0x2a, 0x08,
	0xb1, 0xfb, 0x95, 0x65, 0xd6, 0x13, 0x9b, 0x2f, 0x68, 0x96, 0x09, 0x34, 0xbc, 0x2c, 0xff, 0x6d,
	0x23, 0xdc, 0xf4, 0xb2, 0x24, 0x65, 0x3d, 0xa7, 0x15, 0x44, 0x2e, 0xd7, 0xf7, 0xf4, 0xba, 0x84,
	0x3f, 0x27, 0x06, 0x77, 0x9a, 0x91, 0xa0, 0x36, 0x77, 0x9f, 0x7a, 0x61, 0x10, 0x51, 0xe1, 0x17,
	0x41, 0xd4, 0x71, 0x78, 0xd0, 0xe9, 0xa6, 0xfa, 0x12, 0xef, 0x49, 0x4f, 0xa5, 0xce, 0x09, 0x4d,
	0x80, 0x98, 0x74, 0x5d, 0x4e, 0x75, 0xe2, 0xbc, 0x20, 0xa6, 0xd4, 0xb1, 0x6d, 0xe6, 0x3c, 0x4d,
	0x3c, 0xce, 0xfa, 0x8e, 0x1b, 0xc7, 0x9c, 0x9d, 0x50, 0x2b, 0xee, 0x07, 0x49, 0x9c, 0xa5, 0x76,
	0x9c, 0xd3, 0x90, 0xba, 0x89, 0x8e, 0x37, 0x24, 0x2e, 0x5c, 0x35, 0x11, 0xbe, 0x5a, 0x27, 0xdc,
	0x68, 0x53, 0xea, 0x3b, 0x71, 0xd6, 0x0a, 0x83, 0xa4, 0xab, 0xbb, 0x5b, 0x3b, 0x08, 0x43, 0xa7,
	0xf0, 0x26, 0x4e, 0x8f, 0x33, 0x9a, 0xe8, 0x8b, 0x98, 0x03, 0x16, 0xe3, 0xbe, 0x41, 0x7f, 0x15,
	0xb0, 0xd2, 0xfc, 0xc0, 0xab, 0xb2, 0x04, 0xdc, 0x62, 0x47, 0x45, 0x44, 0xf0, 0xb9, 0xdb, 0xd7,
	0x68, 0xa4, 0xeb, 0x72, 0xbf, 0xcd, 0xf8, 0x17, 0x1d, 0x09, 0xa2, 0x94, 0x72, 0xd3, 0x14, 0x17,
	0xc2, 0xe0, 0x38, 0x0b, 0x7c, 0x71, 0xf7, 0x2c, 0xde, 0x74, 0x3b, 0x0c, 0x7a, 0x41, 0x2a, 0x57,
	0x21, 0x2f, 0xf8, 0x60, 0x8e, 0x39, 0xb0, 0x2d, 0xea, 0x9c, 0x75, 0x8d, 0x34, 0x1d, 0x33, 0x7d,
	0x5d, 0x57, 0x62, 0xd6, 0xd7, 0xa9, 0x8d, 0x98, 0x33, 0x3f, 0xf3, 0xa8, 0xf5, 0xa2, 0x36, 0x72,
	0xcf, 0xb1, 0x07, 0x97, 0x86, 0x8c, 0x2a, 0xd6, 0xa0, 0x72, 0x97, 0xd3, 0x98, 0x89, 0x68, 0x21,
	0x48, 0xb9, 0x39, 0x63, 0x0c, 0x5e, 0x2e, 0x1c, 0xa0, 0x10, 0x2a, 0xc3, 0x95, 0x76, 0x35, 0x39,
	0x4d, 0x68, 0x6a, 0x35, 0xb8, 0xc2, 0x69, 0x9a, 0xf1, 0xa8, 0x3c, 0xea, 0x01, 0x71, 0x7f, 0x21,
	0xe9, 0x66, 0xa9, 0xcf, 0xfa, 0x51, 0x19, 0xb1, 0xeb, 0x8c, 0x5b, 0xc2, 0xd2, 0x60, 0x7b, 0xab,
	0x02, 0x2c, 0xfd, 0xa9, 0xb0, 0xca, 0x99, 0xe9, 0x46, 0x11, 0xeb, 0x55, 0x59, 0xfa, 0x31, 0x2f,
	0x5e, 0x2c, 0x69, 0x29, 0xfb, 0x31, 0x52, 0x31, 0x21, 0xcd, 0x21, 0x8c, 0xc9, 0x69, 0x41, 0x5b,
	0x88, 0x16, 0x14, 0x8a, 0xad, 0x32, 0x47, 0xde, 0xdb, 0xff, 0x2e, 0xa3, 0xd1, 0xdd, 0xe2, 0x1b,
	0x7e, 0x83, 0x26, 0xd4, 0x5c, 0x4c, 0xce, 0x2d, 0x9c, 0x5b, 0x1e, 0x5b, 0x5f, 0x5e, 0xab, 0xd7,
	0x00, 0x6b, 0x1b, 0x39, 0xef, 0x39, 0xd0, 0x4a, 0x85, 0x9d, 0xa1, 0xe6, 0xb8, 0x5b, 0x45, 0xf0,
	0x3f, 0x68, 0x7e, 0x70, 0x7a, 0x27, 0xff, 0x03, 0x13, 0x4f, 0xcf, 0x30, 0x71, 0x14, 0xa4, 0xdd,
	0xad, 0x72, 0x50, 0xd5, 0xe0, 0x75, 0xd7, 0xce, 0xab, 0xae, 0x28, 0xdf, 0x01, 0x72, 0xfe, 0x8c,
	0x15, 0xbd, 0x05, 0x9a, 0x69, 0x45, 0x39, 0x82, 0x3f, 0xa2, 0xcb, 0x22, 0x45, 0x47, 0x34, 0x3c,
	0xbd, 0x68, 0x64, 0x18, 0x54, 0x1f, 0xe8, 0xaa, 0xcf, 0x8b, 0x94, 0xbf, 0x51, 0x70, 0xab, 0xd2,
	0x53, 0x52, 0xa9, 0x04, 0xf1, 0x01, 0x9a, 0xac, 0x5d, 0x62, 0xf2, 0x7f, 0xd0, 0x5e, 0xd1, 0xb5,
	0xf7, 0x04, 0xd1, 0xa8, 0x3b, 0x11, 0x2b, 0x10, 0xee, 0x21, 0x62, 0xbb, 0xb0, 0xe4, 0x02, 0xc8,
	0xff, 0xa2, 0xcb, 0x37, 0xf3, 0x11, 0x72, 0x5f, 0x9a, 0x92, 0x5f, 0x35, 0x33, 0xc3, 0x8d, 0x14,
	0xb1, 0x88, 0x5a, 0xa0, 0x21, 0x23, 0xb6, 0x45, 0xc8, 0x41, 0x52, 0x42, 0x59, 0x04, 0x57, 0x20,
	0xfc, 0x19, 0xcd, 0x5a, 0x6a, 0x23, 0x72, 0x11, 0xd4, 0x7f, 0x36, 0x6e, 0x7f, 0xd4, 0xa1, 0xc5,
	0xc4, 0x0c, 0x46, 0xae, 0x7a, 0x26, 0x06, 0x7e, 0x8d, 0xc6, 0x95, 0x38, 0x42, 0x46, 0xc1, 0xc2,
	0x3d, 0xd3, 0xfc, 0x13, 0x9a, 0x1a, 0x84, 0x2f, 0xf1, 0x0a, 0x80, 0xdf, 0xa1, 0xcb, 0x5a, 0x6c,
	0x22, 0x08, 0x34, 0x57, 0x75, 0xcd, 0x7d, 0x9a, 0xda, 0x64, 0x27, 0x13, 0x15, 0xc3, 0x2e, 0xba,
	0x62, 0x2a, 0x64, 0xc9, 0x98, 0xcd, 0x23, 0xe5, 0xc0, 0xa3, 0x9c, 0x7c, 0xc8, 0x54, 0x67, 0xc7,
	0xae, 0x06, 0x63, 0x1f, 0x5d, 0x35, 0x96, 0xd4, 0xe4, 0x12, 0xd8, 0x58, 0x3b, 0xcb, 0xc6, 0x9e,
	0x20, 0x57, 0x8d, 0x4c, 0xbb, 0x3a, 0x2e, 0x8e, 0xd7, 0x52, 0x4a, 0x91, 0x71, 0xdb, 0xf1, 0xca,
	0x9b, 0x4e, 0x0f, 0x73, 0xfe, 0x3e, 0xd0, 0x95, 0xe3, 0xf5, 0x4d, 0x0c, 0xb1, 0x22, 0x63, 0x75,
	0x47, 0x26, 0x6c, 0x2b, 0xda, 0xca, 0xe9, 0x87, 0xc0, 0x6e, 0x02, 0x59, 0x59, 0x91, 0xaf, 0xe3,
	0x22, 0xf8, 0xa8, 0xe1, 0x97, 0xcc, 0xdb, 0x82, 0x8f, 0xdc, 0x09, 0x43, 0xf0, 0xe9, 0x57, 0x11,
	0xfc, 0x27, 0xba, 0x54, 0xad, 0xd2, 0x48, 0x03, 0x04, 0xef, 0xea, 0x82, 0xdb, 0x94, 0xfa, 0x7b,
	0x39, 0xa9, 0x2a, 0x37, 0xd6, 0x3e, 0xfd, 0x8e, 0x9f, 0xa1, 0xf3, 0x31, 0xeb, 0x93, 0x65, 0xd0,
	0x98, 0x37, 0xc4, 0x97, 0xdd, 0xa3, 0x72, 0xec, 0xe6, 0xc8, 0xf7, 0x6f, 0x8d, 0xf3, 0x7b, 0xbb,
	0x47, 0x3b, 0x43, 0x4d, 0x31, 0x0a, 0xff, 0x86, 0x86, 0x45, 0x91, 0x42, 0x56, 0x60, 0x74, 0xc3,
	0x38, 0x7a, 0xfd, 0x74, 0xf8, 0xc5, 0xef, 0xdf, 0x1a, 0xc3, 0xe2, 0xd3, 0xce, 0x50, 0x13, 0x06,
	0xe2, 0x0e, 0x9a, 0x31, 0x17, 0x1b, 0x64, 0x15, 0x24, 0x1f, 0x9a, 0xee, 0x9a, 0xe0, 0xef, 0x9e,
	0x50, 0xbe, 0x57, 0xb2, 0xab, 0xab, 0xbb, 0xc2, 0x0d, 0x04, 0xfc, 0x2b, 0x1a, 0x91, 0x35, 0x37,
	0x59, 0x07, 0xe5, 0xdb, 0x86, 0x38, 0x91, 0x13, 0xaa, 0x62, 0xc5, 0x20, 0x11, 0xcd, 0x6a, 0xef,
	0x1c, 0xf2, 0xc8, 0x16, 0xcd, 0x4a, 0x1d, 0xe0, 0x29, 0xd1, 0xcc, 0x53, 0x20, 0xe1, 0x1c, 0xea,
	0x83, 0x80, 0x3c, 0xb6, 0x39, 0xc7, 0x16, 0xf0, 0x0c, 0x53, 0x1c, 0xf7, 0xab, 0x08, 0x7e, 0x82,
	0x86, 0xe1, 0xea, 0x3f, 0xb1, 0x1d, 0x49, 0xfd, 0xb2, 0x03, 0x5d, 0x44, 0x10, 0xd3, 0x53, 0x92,
	0x3c, 0xb5, 0xe6, 0x34, 0xc1, 0x6e, 0x02, 0x79, 0x33, 0xe7, 0x2a, 0x11, 0xc4, 0xd3, 0x60, 0xfc,
	0x0c, 0x5d, 0xc8, 0x5f, 0x59, 0x64, 0x1b, 0x44, 0x6f, 0x19, 0x44, 0x01, 0xaf, 0x0a, 0xc9, 0x21,
	0xf8, 0x1d, 0x1a, 0xab, 0xbc, 0xdf, 0xc8, 0xef, 0xa0, 0xb0, 0x64, 0x53, 0x78, 0xb9, 0xbf, 0xfb,
	0xfa, 0xd4, 0xed, 0x26, 0xbe, 0x7f, 0x6b, 0xa0, 0x53, 0x60, 0x67, 0xa8, 0x89, 0x72, 0xad, 0x97,
	0x09, 0x8b, 0x44, 0x94, 0x57, 0x1e, 0x8e, 0x64, 0xc7, 0x16, 0xe5, 0x73, 0x89, 0x4d, 0x60, 0x29,
	0x51, 0xde, 0xab, 0x00, 0x78, 0x03, 0x5d, 0x2c, 0x8a, 0x39, 0xb2, 0x07, 0x52, 0x8b, 0xba, 0xd4,
	0x81, 0x64, 0x54, 0x65, 0xca, 0x61, 0xf8, 0x13, 0x9a, 0x36, 0xd4, 0x83, 0xe4, 0x0d, 0xa8, 0xfd,
	0x64, 0x57, 0x3b, 0x60, 0x32, 0xc2, 0x55, 0x65, 0x2f, 0xa7, 0x75, 0x14, 0x1f, 0xa1, 0xa9, 0x7a,
	0xd1, 0x48, 0x9a, 0xb6, 0x3c, 0x74, 0x24, 0x99, 0x06, 0xe9, 0xc9, 0xbe, 0x8a, 0xe1, 0x63, 0x34,
	0x67, 0x2f, 0xad, 0xc9, 0x3e, 0x98, 0x58, 0x37, 0xa6, 0xba, 0x9a, 0x95, 0xa6, 0x18, 0x50, 0x35,
	0x35, 0x9b, 0x98, 0x39, 0xf5, 0xbd, 0x92, 0x05, 0x36, 0x39, 0x38, 0x7b, 0xaf, 0xf6, 0x73, 0xaa,
	0x65, 0xaf, 0x24, 0x2a, 0xb2, 0x84, 0xb1, 0xce, 0x27, 0x6f, 0x6d, 0x59, 0xa2, 0xb0, 0xb0, 0xcd,
	0x59, 0xcf, 0x60, 0xa3, 0x9c, 0x6e, 0x05, 0xc7, 0x7d, 0x74, 0xa3, 0xd2, 0x44, 0xd2, 0x8d, 0x1d,
	0x82, 0xb1, 0xc7, 0x06, 0x9f, 0x84, 0x51, 0x67, 0x98, 0xbc, 0xe6, 0xd9, 0x58, 0x79, 0x5c, 0x84,
	0xe7, 0x3c, 0x39, 0xb2, 0xc7, 0x45, 0x20, 0xd4, 0xe2, 0x22, 0x7c, 0xc3, 0x1f, 0x10, 0xd6, 0x1f,
	0xb8, 0xe4, 0x1d, 0x48, 0xdd, 0xd7, 0xa5, 0x5e, 0x09, 0xee, 0xae, 0xa0, 0xea, 0x8f, 0x86, 0xa9,
	0xb0, 0x06, 0x8a, 0xb3, 0x35, 0xbc, 0x9e, 0x89, 0x67, 0x3b, 0xdb, 0xba, 0xfa, 0xba, 0x72, 0xb6,
	0x75, 0xf9, 0x75, 0x6d, 0xf2, 0xb0, 0x4b, 0xe4, 0xfd, 0x0f, 0x4c, 0x1e, 0x98, 0xb6, 0xc9, 0x03,
	0x28, 0x32, 0x46, 0xad, 0xd9, 0x42, 0x3e, 0xd8, 0x32, 0xc6, 0x0b, 0x20, 0x9a, 0x82, 0xc2, 0x04,
	0x55, 0x20, 0x91, 0x31, 0xd4, 0x16, 0x10, 0xf9, 0x68, 0xcb, 0x18, 0xb9, 0xe8, 0x56, 0x4e, 0x53,
	0x32, 0x06, 0xad, 0x22, 0x15, 0x49, 0xd9, 0x35, 0x22, 0x7f, 0x0d, 0x96, 0x6c, 0xe6, 0x34, 0x83,
	0xa4, 0x44, 0x2a, 0x92, 0xb2, 0x91, 0x45, 0x3e, 0x0d, 0x96, 0xdc, 0xc8, 0x69, 0x06, 0x49, 0x89,
	0x88, 0x04, 0x65, 0x6a, 0x3e, 0x11, 0xdf, 0x96, 0xa0, 0xb6, 0x83, 0x30, 0x94, 0x9e, 0x2b, 0x1f,
	0x31, 0x4a, 0x82, 0x6a, 0x6b, 0xb0, 0xc8, 0x04, 0x4a, 0xa3, 0x97, 0x50, 0x5b, 0x26, 0xc8, 0x1f,
	0x55, 0x79, 0x7a, 0x53, 0x32, 0x81, 0x5b, 0x01, 0xa0, 0x66, 0x50, 0x7b, 0x96, 0xa4, 0x6d, 0xad,
	0x19, 0x24, 0x51, 0xd7, 0x9c, 0xf0, 0x14, 0x48, 0xec, 0xad, 0xda, 0x29, 0x25, 0x1d, 0xdb, 0xde,
	0xca, 0x9a, 0x40, 0xd7, 0x1c, 0xf7, 0xaa, 0x88, 0xc8, 0x07, 0xf5, 0x7e, 0x18, 0xe9, 0xda, 0xf2,
	0xc1, 0xab, 0x82, 0xa9, 0xcb, 0x4e, 0x86, 0x2a, 0x26, 0x72, 0x61, 0xd1, 0x82, 0x23, 0x81, 0x2d,
	0x17, 0xfe, 0x21, 0x19, 0x4a, 0x2e, 0x2c, 0x86, 0x89, 0xf8, 0x6b, 0x6c, 0x03, 0x92, 0xcf, 0xb6,
	0xf8, 0x2b, 0x0e, 0x5e, 0xa6, 0x88, 0x22, 0x63, 0x28, 0xf1, 0xb7, 0xad, 0xe3, 0xf8, 0x05, 0x42,
	0xa7, 0x4d, 0x4b, 0xf2, 0x05, 0xa4, 0xef, 0x98, 0xa5, 0xe1, 0x8e, 0x57, 0x05, 0x47, 0xdb, 0xc5,
	0x57, 0xb1, 0x91, 0xf5, 0xfe, 0x14, 0x09, 0xad, 0x0f, 0x3c, 0xc9, 0x94, 0x65, 0xbf, 0xfa, 0xc0,
	0x53, 0x31, 0x91, 0x58, 0xed, 0x8d, 0x53, 0xd2, 0xb3, 0x25, 0x56, 0x31, 0xdf, 0x33, 0x72, 0xc3,
	0x6c, 0xdb, 0xcc, 0x11, 0x67, 0x57, 0x34, 0x56, 0x49, 0x64, 0x3b, 0xbb, 0x1d, 0xc9, 0x50, 0xce,
	0xae, 0x18, 0x26, 0xce, 0xce, 0xd8, 0xfb, 0x27, 0xcc, 0x76, 0x76, 0xd2, 0x63, 0xf7, 0x80, 0xad,
	0x3f, 0x84, 0xa6, 0x3d, 0x1d, 0xc7, 0x31, 0xba, 0x66, 0xed, 0x1f, 0x92, 0xd8, 0xb6, 0x35, 0x4d,
	0x18, 0x22, 0xfd, 0xc0, 0xdc, 0x54, 0x9a, 0xe5, 0x66, 0x0e, 0x8e, 0x10, 0x29, 0xca, 0xe4, 0xfa,
	0xff, 0x4d, 0xc8, 0xb1, 0xcd, 0xa0, 0x5c, 0xda, 0x66, 0x39, 0x42, 0xbf, 0x3f, 0x33, 0xb9, 0x46,
	0x9d, 0x22, 0xfb, 0x41, 0xd5, 0xae, 0x2f, 0xe1, 0x03, 0xfa, 0x41, 0x40, 0x34, 0x04, 0x92, 0x58,
	0x81, 0x36, 0xc7, 0xd0, 0x68, 0xd9, 0x09, 0xdc, 0x1c, 0x7d, 0x3f, 0x02, 0xe3, 0xe3, 0x56, 0xeb,
	0x02, 0x74, 0x05, 0x1f, 0xfd, 0x17, 0x00, 0x00, 0xff, 0xff, 0x2b, 0x77, 0xd3, 0x3b, 0x05, 0x1c,
	0x00, 0x00,
}
