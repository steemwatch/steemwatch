// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: event.proto

package pb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Event struct {
	// Types that are valid to be assigned to Event:
	//	*Event_StoryVoted
	//	*Event_CommentVoted
	Event isEvent_Event `protobuf_oneof:"event"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (m *Event) String() string            { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptorEvent, []int{0} }

type isEvent_Event interface {
	isEvent_Event()
}

type Event_StoryVoted struct {
	StoryVoted *StoryVotedEvent `protobuf:"bytes,1,opt,name=story_voted,json=storyVoted,oneof"`
}
type Event_CommentVoted struct {
	CommentVoted *CommentVotedEvent `protobuf:"bytes,2,opt,name=comment_voted,json=commentVoted,oneof"`
}

func (*Event_StoryVoted) isEvent_Event()   {}
func (*Event_CommentVoted) isEvent_Event() {}

func (m *Event) GetEvent() isEvent_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (m *Event) GetStoryVoted() *StoryVotedEvent {
	if x, ok := m.GetEvent().(*Event_StoryVoted); ok {
		return x.StoryVoted
	}
	return nil
}

func (m *Event) GetCommentVoted() *CommentVotedEvent {
	if x, ok := m.GetEvent().(*Event_CommentVoted); ok {
		return x.CommentVoted
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Event) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Event_OneofMarshaler, _Event_OneofUnmarshaler, _Event_OneofSizer, []interface{}{
		(*Event_StoryVoted)(nil),
		(*Event_CommentVoted)(nil),
	}
}

func _Event_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Event)
	// event
	switch x := m.Event.(type) {
	case *Event_StoryVoted:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.StoryVoted); err != nil {
			return err
		}
	case *Event_CommentVoted:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CommentVoted); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Event.Event has unexpected type %T", x)
	}
	return nil
}

func _Event_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Event)
	switch tag {
	case 1: // event.story_voted
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(StoryVotedEvent)
		err := b.DecodeMessage(msg)
		m.Event = &Event_StoryVoted{msg}
		return true, err
	case 2: // event.comment_voted
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CommentVotedEvent)
		err := b.DecodeMessage(msg)
		m.Event = &Event_CommentVoted{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Event_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Event)
	// event
	switch x := m.Event.(type) {
	case *Event_StoryVoted:
		s := proto.Size(x.StoryVoted)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_CommentVoted:
		s := proto.Size(x.CommentVoted)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*Event)(nil), "steemwatch.Event")
}

func init() { proto.RegisterFile("event.proto", fileDescriptorEvent) }

var fileDescriptorEvent = []byte{
	// 188 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4e, 0x2d, 0x4b, 0xcd,
	0x2b, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x2a, 0x2e, 0x49, 0x4d, 0xcd, 0x2d, 0x4f,
	0x2c, 0x49, 0xce, 0x90, 0xd2, 0x4d, 0xcf, 0x2c, 0xc9, 0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5,
	0x4f, 0xcf, 0x4f, 0xcf, 0xd7, 0x07, 0x2b, 0x49, 0x2a, 0x4d, 0x03, 0xf3, 0xc0, 0x1c, 0x30, 0x0b,
	0xa2, 0x55, 0x4a, 0x32, 0x39, 0x3f, 0x37, 0x37, 0x35, 0xaf, 0x24, 0xbe, 0x2c, 0xbf, 0x24, 0x35,
	0x25, 0x1e, 0xc9, 0x54, 0x29, 0xf1, 0xe2, 0x92, 0xfc, 0xa2, 0x4a, 0x4c, 0x09, 0xa5, 0x69, 0x8c,
	0x5c, 0xac, 0xae, 0x20, 0xbe, 0x90, 0x1d, 0x17, 0x37, 0x92, 0x22, 0x09, 0x46, 0x05, 0x46, 0x0d,
	0x6e, 0x23, 0x69, 0x3d, 0x84, 0x73, 0xf4, 0x82, 0x41, 0xd2, 0x61, 0x20, 0x59, 0xb0, 0x0e, 0x0f,
	0x86, 0x20, 0xae, 0x62, 0xb8, 0x90, 0x90, 0x0b, 0x17, 0x2f, 0x8a, 0xfd, 0x12, 0x4c, 0x60, 0x13,
	0x64, 0x91, 0x4d, 0x70, 0x86, 0x28, 0x40, 0x31, 0x83, 0x27, 0x19, 0x49, 0xd0, 0x89, 0x9d, 0x8b,
	0x15, 0xec, 0x3c, 0x27, 0x96, 0x28, 0xa6, 0x82, 0xa4, 0x24, 0x36, 0xb0, 0x2b, 0x8d, 0x01, 0x01,
	0x00, 0x00, 0xff, 0xff, 0x74, 0xb2, 0x45, 0x3a, 0x23, 0x01, 0x00, 0x00,
}
