// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: story_voted_event.proto

package pb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import steemwatch_steem "steempb"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type StoryVotedEvent struct {
	Operation     *steemwatch_steem.VoteOperation `protobuf:"bytes,1,opt,name=operation" json:"operation,omitempty"`
	Title         string                          `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	URL           string                          `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	PendingPayout string                          `protobuf:"bytes,4,opt,name=pending_payout,json=pendingPayout,proto3" json:"pending_payout,omitempty"`
}

func (m *StoryVotedEvent) Reset()                    { *m = StoryVotedEvent{} }
func (m *StoryVotedEvent) String() string            { return proto.CompactTextString(m) }
func (*StoryVotedEvent) ProtoMessage()               {}
func (*StoryVotedEvent) Descriptor() ([]byte, []int) { return fileDescriptorStoryVotedEvent, []int{0} }

func (m *StoryVotedEvent) GetOperation() *steemwatch_steem.VoteOperation {
	if m != nil {
		return m.Operation
	}
	return nil
}

func (m *StoryVotedEvent) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *StoryVotedEvent) GetURL() string {
	if m != nil {
		return m.URL
	}
	return ""
}

func (m *StoryVotedEvent) GetPendingPayout() string {
	if m != nil {
		return m.PendingPayout
	}
	return ""
}

func init() {
	proto.RegisterType((*StoryVotedEvent)(nil), "steemwatch.StoryVotedEvent")
}

func init() { proto.RegisterFile("story_voted_event.proto", fileDescriptorStoryVotedEvent) }

var fileDescriptorStoryVotedEvent = []byte{
	// 235 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2f, 0x2e, 0xc9, 0x2f,
	0xaa, 0x8c, 0x2f, 0xcb, 0x2f, 0x49, 0x4d, 0x89, 0x4f, 0x2d, 0x4b, 0xcd, 0x2b, 0xd1, 0x2b, 0x28,
	0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x2a, 0x2e, 0x49, 0x4d, 0xcd, 0x2d, 0x4f, 0x2c, 0x49, 0xce, 0x90,
	0xd2, 0x4d, 0xcf, 0x2c, 0xc9, 0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0x4f, 0xcf, 0x4f, 0xcf,
	0xd7, 0x07, 0x2b, 0x49, 0x2a, 0x4d, 0x03, 0xf3, 0xc0, 0x1c, 0x30, 0x0b, 0xa2, 0x55, 0x4a, 0x06,
	0xac, 0xb5, 0x20, 0x49, 0x1f, 0x64, 0x6a, 0x7c, 0x7e, 0x41, 0x6a, 0x51, 0x62, 0x49, 0x66, 0x7e,
	0x1e, 0x44, 0x56, 0x69, 0x05, 0x23, 0x17, 0x7f, 0x30, 0xc8, 0xd2, 0x30, 0x90, 0x9d, 0xae, 0x20,
	0x2b, 0x85, 0x6c, 0xb9, 0x38, 0xe1, 0xca, 0x24, 0x18, 0x15, 0x18, 0x35, 0xb8, 0x8d, 0xe4, 0xf5,
	0x10, 0x0e, 0x80, 0x30, 0xf5, 0x40, 0x1a, 0xfc, 0x61, 0xca, 0x82, 0x10, 0x3a, 0x84, 0x44, 0xb8,
	0x58, 0x4b, 0x32, 0x4b, 0x72, 0x52, 0x25, 0x98, 0x14, 0x18, 0x35, 0x38, 0x83, 0x20, 0x1c, 0x21,
	0x49, 0x2e, 0xe6, 0xd2, 0xa2, 0x1c, 0x09, 0x66, 0x90, 0x98, 0x13, 0xfb, 0xa3, 0x7b, 0xf2, 0xcc,
	0xa1, 0x41, 0x3e, 0x41, 0x20, 0x31, 0x21, 0x55, 0x2e, 0xbe, 0x82, 0xd4, 0xbc, 0x94, 0xcc, 0xbc,
	0xf4, 0xf8, 0x82, 0xc4, 0xca, 0xfc, 0xd2, 0x12, 0x09, 0x16, 0xb0, 0x4e, 0x5e, 0xa8, 0x68, 0x00,
	0x58, 0xd0, 0x89, 0x25, 0x8a, 0xa9, 0x20, 0x29, 0x89, 0x0d, 0xec, 0x6e, 0x63, 0x40, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x53, 0x96, 0x2d, 0xf9, 0x2b, 0x01, 0x00, 0x00,
}
